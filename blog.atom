<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>V8</title><subtitle>JavaScript V8 引擎</subtitle><link href="https://v8.js.cn/blog.atom" rel="self"/><link href="https://v8.js.cn/"/><updated>2021-03-17T00:00:00Z</updated><id>https://v8.js.cn/</id><author><name>Mathias Bynens</name></author><entry><title>V8 release v9.0</title><link href="https://v8.js.cn/blog/v8-release-90/"/><updated>2021-03-17T00:00:00Z</updated><id>https://v8.js.cn/blog/v8-release-90/</id><author><name>Ingvar Stepanyan, standing inline</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/9.0&quot;&gt;V8 version 9.0&lt;/a&gt;, which is in beta until its release in coordination with Chrome 90 Stable in several weeks. V8 v9.0 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;regexp-match-indices&quot;&gt;RegExp match indices &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#regexp-match-indices&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Starting in v9.0, developers may opt into getting an array of the start and end positions of matched capture groups in regular expression matches. This array is available via the &lt;code&gt;.indices&lt;/code&gt; property on match objects when the regular expression has the &lt;code&gt;/d&lt;/code&gt; flag.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// Note the /d flag.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ab&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Index 0 is the whole match.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → [0, 2]&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Index 1 is the 1st capture group.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → [0, 1]&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Index 2 is the 2nd capture group.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → [1, 2]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://v8.dev/features/regexp-match-indices&quot;&gt;our explainer&lt;/a&gt; for an in-depth dive.&lt;/p&gt;
&lt;h3 id=&quot;faster-super-property-access&quot;&gt;Faster &lt;code&gt;super&lt;/code&gt; property access &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#faster-super-property-access&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Accessing &lt;code&gt;super&lt;/code&gt; properties (for example, &lt;code&gt;super.x&lt;/code&gt;) has been optimized by using V8’s inline cache system and optimized code generation in TurboFan. With these changes, &lt;code&gt;super&lt;/code&gt; property access is now closer to being on par with regular property access, as can be seen from the graphs below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/fast-super/super-opt.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Compare super property access to regular property access, optimized&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://v8.dev/blog/fast-super&quot;&gt;the dedicated blog post&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 id=&quot;for-(-async-of-disallowed&quot;&gt;&lt;code&gt;for ( async of&lt;/code&gt; disallowed &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#for-(-async-of-disallowed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/tc39/ecma262/issues/2034&quot;&gt;grammar ambiguity&lt;/a&gt; was recently discovered and &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/2683221&quot;&gt;fixed&lt;/a&gt; in V8 v9.0.&lt;/p&gt;
&lt;p&gt;The token sequence &lt;code&gt;for ( async of&lt;/code&gt; now no longer parses.&lt;/p&gt;
&lt;h2 id=&quot;webassembly&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#webassembly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;faster-js-to-wasm-calls&quot;&gt;Faster JS-to-Wasm calls &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#faster-js-to-wasm-calls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;V8 uses different representations for the parameters of WebAssembly and JavaScript functions. For this reason, when JavaScript calls an exported WebAssembly function, the call goes through a so-called &lt;em&gt;JS-to-Wasm wrapper&lt;/em&gt;, responsible for adapting parameters from JavaScript land to WebAssembly land as well as adapting results in the opposite direction.&lt;/p&gt;
&lt;p&gt;Unfortunately, this comes with a performance cost, which meant that calls from JavaScript to WebAssembly were not as fast as calls from JavaScript to JavaScript. To minimize this overhead the JS-to-Wasm wrapper can now be inlined at the call site, simplifying the code and removing this extra frame.&lt;/p&gt;
&lt;p&gt;Let’s say we have a WebAssembly function to add two double floating point numbers, like this:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addNumbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and say we call that from JavaScript to add some vectors (represented as typed arrays):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addNumbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;addNumbers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vectorSum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;len&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Float64Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addNumbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100_000_000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Float64Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Float64Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  v1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  v2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Warm up.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;vectorSum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Measure.&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vectorSum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On this simplified microbenchmark, we see the following improvements:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/v8-release-90/js-to-wasm.svg&quot; alt=&quot;&quot; width=&quot;552&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Microbenchmark comparison&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The feature is still experimental and can be enabled through the &lt;code&gt;--turbo-inline-js-wasm-calls&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;For more details, see the &lt;a href=&quot;https://docs.google.com/document/d/1mXxYnYN77tK-R1JOVo6tFG3jNpMzfueQN1Zp5h3r9aM/edit&quot;&gt;design document&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-90/#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/8.9..branch-heads/9.0 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 9.0 -t branch-heads/9.0&lt;/code&gt; to experiment with the new features in V8 v9.0. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Faster releases</title><link href="https://v8.js.cn/blog/faster-releases/"/><updated>2021-03-04T00:00:00Z</updated><id>https://v8.js.cn/blog/faster-releases/</id><author><name>Ingvar Stepanyan (@RReverser)</name></author><content type="html">&lt;p&gt;In order to ship new features and bug fixes faster to its users, Chrome is &lt;a href=&quot;https://developer.chrome.com/blog/faster-release-cycle/&quot;&gt;speeding up its release cycle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to match Chrome’s new release cadence, V8 will also start to tag a major release branch every 4 weeks (instead of the previous 6). Every second major release branch will also be maintained for 8 weeks for embedders who prefer to stay on a less frequent update schedule.&lt;/p&gt;
&lt;p&gt;To learn more about the motivation and the details, check out &lt;a href=&quot;https://blog.chromium.org/2021/03/speeding-up-release-cycle.html&quot;&gt;the Chromium blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This change will start rolling out in Q3 of 2021, tentatively targeting Chrome 94 / V8 v9.4 as the launch milestone.&lt;/p&gt;
&lt;p&gt;For releases that contain interesting changes in terms of language support or optimizations, we’ll continue publishing blog posts on v8.dev to keep developers and embedders up-to-date.&lt;/p&gt;
</content></entry><entry><title>Super fast `super` property access</title><link href="https://v8.js.cn/blog/fast-super/"/><updated>2021-02-18T00:00:00Z</updated><id>https://v8.js.cn/blog/fast-super/</id><author><name>Marja Hölttä, super optimizer</name></author><content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super&quot;&gt;&lt;code&gt;super&lt;/code&gt; keyword&lt;/a&gt; can be used for accessing properties and functions on an object’s parent.&lt;/p&gt;
&lt;p&gt;Previously, accessing a super property (like &lt;code&gt;super.x&lt;/code&gt;) was implemented via a runtime call. Starting from V8 v9.0, we reuse the &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;inline cache (IC) system&lt;/a&gt; in non-optimized code and generate the proper optimized code for super property access, without having to jump to the runtime.&lt;/p&gt;
&lt;p&gt;As you can see from the graphs below, super property access used to be an order of magnitude slower than normal property access because of the runtime call. Now we’re much closer to being on par.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/fast-super/super-opt.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Compare super property access to regular property access, optimized&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/fast-super/super-no-opt.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Compare super property access to regular property access, unoptimized&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Super property access is difficult to benchmark, since it must happen inside a function. We can’t benchmark individual property accesses, but only bigger chunks of work. Thus the function call overhead is included in the measurement. The above graphs somewhat underestimate the difference between super property access and normal property access, but they’re accurate enough for demonstrating the difference between the old and new super property access.&lt;/p&gt;
&lt;p&gt;In the unoptimized (interpreted) mode, super property access will always be slower than normal property access, since we need to do more loads (reading the home object from the context and reading the &lt;code&gt;__proto__&lt;/code&gt; from the home object). In the optimized code, we already embed the home object as a constant whenever possible. This could be further improved by embedding its &lt;code&gt;__proto__&lt;/code&gt; as a constant too.&lt;/p&gt;
&lt;h3 id=&quot;prototypal-inheritance-and-super&quot;&gt;Prototypal inheritance and &lt;code&gt;super&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/fast-super/#prototypal-inheritance-and-super&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s start from the basics - what does super property access even mean?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;A&lt;/code&gt; is the super class of &lt;code&gt;B&lt;/code&gt; and  &lt;code&gt;b.m()&lt;/code&gt; returns &lt;code&gt;100&lt;/code&gt; as you’d expect.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/fast-super/inheritance-1.svg&quot; alt=&quot;&quot; width=&quot;100&quot; height=&quot;147&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Class inheritance diagram&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The reality of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;JavaScript’s prototypal inheritance&lt;/a&gt; is more complicated:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/fast-super/inheritance-2.svg&quot; alt=&quot;&quot; width=&quot;435&quot; height=&quot;284&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Prototypal inheritance diagram&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We need to distinguish carefully between the &lt;code&gt;__proto__&lt;/code&gt; and &lt;code&gt;prototype&lt;/code&gt; properties - they don’t mean the same thing! To make it more confusing, the object &lt;code&gt;b.__proto__&lt;/code&gt; is often referred to as &amp;quot;&lt;code&gt;b&lt;/code&gt;’s prototype&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b.__proto__&lt;/code&gt; is the object from which &lt;code&gt;b&lt;/code&gt; inherits properties. &lt;code&gt;B.prototype&lt;/code&gt; is the object which will be the &lt;code&gt;__proto__&lt;/code&gt; of objects created with &lt;code&gt;new B()&lt;/code&gt;, that is &lt;code&gt;b.__proto__ === B.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In turn, &lt;code&gt;B.prototype&lt;/code&gt; has its own &lt;code&gt;__proto__&lt;/code&gt; property that equals to &lt;code&gt;A.prototype&lt;/code&gt;. Together, this forms what’s called a prototype chain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b -&amp;gt;
 b.__proto__ === B.prototype -&amp;gt;
  B.prototype.__proto__ === A.prototype -&amp;gt;
   A.prototype.__proto__ === Object.prototype -&amp;gt;
    Object.prototype.__proto__ === null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Through this chain, &lt;code&gt;b&lt;/code&gt; can access all properties defined in any of those objects. The method &lt;code&gt;m&lt;/code&gt; is a property of &lt;code&gt;B.prototype&lt;/code&gt; — &lt;code&gt;B.prototype.m&lt;/code&gt; — and this is why &lt;code&gt;b.m()&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;Now we can define &lt;code&gt;super.x&lt;/code&gt; inside &lt;code&gt;m&lt;/code&gt; as a property lookup where we start looking for the property &lt;code&gt;x&lt;/code&gt; in the &lt;em&gt;home object’s&lt;/em&gt; &lt;code&gt;__proto__&lt;/code&gt; and walk up the prototype chain until we find it.&lt;/p&gt;
&lt;p&gt;The home object is the object where the method is defined - in this case the home object for &lt;code&gt;m&lt;/code&gt; is &lt;code&gt;B.prototype&lt;/code&gt;. Its &lt;code&gt;__proto__&lt;/code&gt; is &lt;code&gt;A.prototype&lt;/code&gt;, so that’s where we start looking for the property &lt;code&gt;x&lt;/code&gt;. We’ll call &lt;code&gt;A.prototype&lt;/code&gt; the &lt;em&gt;lookup start object&lt;/em&gt;. In this case we find the property &lt;code&gt;x&lt;/code&gt; immediately in the lookup start object, but in general it might also be somewhere further up the prototype chain.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;B.prototype&lt;/code&gt; had a property called &lt;code&gt;x&lt;/code&gt;, we’d ignore it, since we start looking for it above it in the prototype chain. Also, in this case super property lookup doesn’t depend on the &lt;em&gt;receiver&lt;/em&gt; - the object that is the &lt;code&gt;this&lt;/code&gt; value when calling the method.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;some_other_object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// still returns 100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the property has a getter though, the receiver will be passed to the getter as the &lt;code&gt;this&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;To summarize: in a super property access, &lt;code&gt;super.x&lt;/code&gt;, the lookup start object is the &lt;code&gt;__proto__&lt;/code&gt; of the home object and the receiver is the receiver of the method where the super property access occurs.&lt;/p&gt;
&lt;p&gt;In a normal property access, &lt;code&gt;o.x&lt;/code&gt;, we start looking for the property &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;o&lt;/code&gt; and walk up the prototype chain. We’ll also use &lt;code&gt;o&lt;/code&gt; as the receiver if &lt;code&gt;x&lt;/code&gt; happens to have a getter - the lookup start object and the receiver are the same object (&lt;code&gt;o&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Super property access is just like regular property access where the lookup start object and the receiver are different.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;implementing-faster-super&quot;&gt;Implementing faster &lt;code&gt;super&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/fast-super/#implementing-faster-super&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above realization is also the key for implementing fast super property access. V8 is already engineered to make property access fast - now we generalized it for the case where the receiver and the lookup start object differ.&lt;/p&gt;
&lt;p&gt;V8’s data-driven inline cache system is the core part for implementing fast property access. You can read about it in &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;the high-level introduction&lt;/a&gt; linked above, or the more detailed descriptions of &lt;a href=&quot;https://v8.dev/blog/fast-properties&quot;&gt;V8’s object representation&lt;/a&gt; and &lt;a href=&quot;https://docs.google.com/document/d/1mEhMn7dbaJv68lTAvzJRCQpImQoO6NZa61qRimVeA-k/edit?usp=sharing&quot;&gt;how V8’s data-driven inline cache system is implemented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To speed up &lt;code&gt;super&lt;/code&gt;, we’ve added a new &lt;a href=&quot;https://v8.dev/docs/ignition&quot;&gt;Ignition&lt;/a&gt; bytecode, &lt;code&gt;LdaNamedPropertyFromSuper&lt;/code&gt;, which enables us to plug into the IC system in the interpreted mode and also generate optimized code for super property access.&lt;/p&gt;
&lt;p&gt;With the new byte code, we can add a new IC, &lt;code&gt;LoadSuperIC&lt;/code&gt;, for speeding up super property loads. Similar to &lt;code&gt;LoadIC&lt;/code&gt; which handles normal property loads, &lt;code&gt;LoadSuperIC&lt;/code&gt; keeps track of the shapes of the lookup start objects it has seen and remembers how to load properties from objects which have one of those shapes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LoadSuperIC&lt;/code&gt; reuses the existing IC machinery for property loads, just with a different lookup start object. As the IC layer already distinguished between the lookup start object and the receiver, the implementation should’ve been easy. But as the lookup start object and the receiver were always the same, there were bugs where we’d use the lookup start object even though we meant the receiver, and vice versa. Those bugs have been fixed and we now properly support cases where the lookup start object and the receiver differ.&lt;/p&gt;
&lt;p&gt;Optimized code for super property access is generated by the &lt;code&gt;JSNativeContextSpecialization&lt;/code&gt; phase of the &lt;a href=&quot;https://v8.dev/docs/turbofan&quot;&gt;TurboFan&lt;/a&gt; compiler. The implementation generalizes the existing property lookup machinery (&lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/js-native-context-specialization.cc;l=1130&quot;&gt;&lt;code&gt;JSNativeContextSpecialization::ReduceNamedAccess&lt;/code&gt;&lt;/a&gt;) to handle the case where the receiver and the lookup start object differ.&lt;/p&gt;
&lt;p&gt;The optimized code got even more optimal when we moved the home object out of the &lt;code&gt;JSFunction&lt;/code&gt; where it was stored. It’s now stored in the class context, which makes TurboFan embed it into the optimized code as a constant whenever possible.&lt;/p&gt;
&lt;h2 id=&quot;other-usages-of-super&quot;&gt;Other usages of &lt;code&gt;super&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/fast-super/#other-usages-of-super&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;super&lt;/code&gt; inside object literal methods works just like inside class methods, and is optimized similarly.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myproto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  __proto__&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; __proto__&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; myproto &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// returns 100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are of course corner cases which we didn’t optimize for. For example, writing super properties (&lt;code&gt;super.x = ...&lt;/code&gt;) is not optimized. In addition, using mixins turns the access site megamorphic, leading into slower super property access:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createMixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mixin&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//                ^ this access site is megamorphic&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Mixin&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myClass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createMixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;createMixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;createMixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;createMixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;createMixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s still work to be done to ensure all object-oriented patterns are as speedy as they can be - stay tuned for further optimizations!&lt;/p&gt;
</content></entry><entry><title>Faster JavaScript calls</title><link href="https://v8.js.cn/blog/adaptor-frame/"/><updated>2021-02-15T00:00:00Z</updated><id>https://v8.js.cn/blog/adaptor-frame/</id><author><name>Victor Gomes, the frame shredder</name></author><content type="html">&lt;p&gt;JavaScript allows calling a function with a different number of arguments than the expected number of parameters, i.e., one can pass fewer or more arguments than the declared formal parameters. The former case is called under-application and the latter is called over-application.&lt;/p&gt;
&lt;p&gt;In the under-application case, the remaining parameters get assigned the undefined value. In the over-application case, the remaining arguments can be accessed by using the rest parameter and the &lt;code&gt;arguments&lt;/code&gt; property, or they are simply superfluous and they can be ignored. Many Web/Node.js frameworks nowadays use this JS feature to accept optional parameters and create a more flexible API.&lt;/p&gt;
&lt;p&gt;Until recently, V8 had a special machinery to deal with arguments size mismatch: the arguments adaptor frame. Unfortunately, argument adaption comes at a performance cost, but is commonly needed in modern front-end and middleware frameworks. It turns out that, with a clever trick, we can remove this extra frame, simplify the V8 codebase and get rid of almost the entire overhead.&lt;/p&gt;
&lt;p&gt;We can calculate the performance impact of removing the arguments adaptor frame through a micro-benchmark.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; z&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/v8-release-89/perf.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Performance impact of removing the arguments adaptor frame, as measured through a micro-benchmark.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The graph shows that there is no overhead anymore when running on &lt;a href=&quot;https://v8.dev/blog/jitless&quot;&gt;JIT-less mode&lt;/a&gt; (Ignition) with a 11.2% performance improvement. When using &lt;a href=&quot;https://v8.dev/docs/turbofan&quot;&gt;TurboFan&lt;/a&gt;, we get up to 40% speedup.&lt;/p&gt;
&lt;p&gt;This microbenchmark was naturally designed to maximise the impact of the arguments adaptor frame. We have however seen a considerable improvement in many benchmarks, such as in &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/b7aa85fe00c521a704ca83cc8789354e86482a60/test/js-perf-test/JSTests.json&quot;&gt;our internal JSTests/Array benchmark&lt;/a&gt; (7%) and in &lt;a href=&quot;https://github.com/chromium/octane&quot;&gt;Octane2&lt;/a&gt; (4.6% in Richards and 6.1% in EarleyBoyer).&lt;/p&gt;
&lt;h2 id=&quot;tl%3Bdr%3A-reverse-the-arguments&quot;&gt;TL;DR: Reverse the arguments &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#tl%3Bdr%3A-reverse-the-arguments&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The whole point of this project was to remove the arguments adaptor frame, which offers a consistent interface to the callee when accessing its arguments in the stack. In order to do that, we needed to reverse the arguments in the stack and added a new slot in the callee frame containing the actual argument count. The figure below shows the example of a typical frame before and after the change.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/frame-diff.svg&quot; alt=&quot;&quot; width=&quot;639&quot; height=&quot;624&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;A typical JavaScript stack frame before and after removing the arguments adaptor frame.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;making-javascript-calls-faster&quot;&gt;Making JavaScript calls faster &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#making-javascript-calls-faster&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To appreciate what we have done to make calls faster, let’s see how V8 performs a call and how the arguments adaptor frame works.&lt;/p&gt;
&lt;p&gt;What happens inside V8 when we invoke a function call in JS? Let’s suppose the following JS script:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/flow.svg&quot; alt=&quot;&quot; width=&quot;1193&quot; height=&quot;391&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Flow of execution inside V8 during a function call.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ignition&quot;&gt;Ignition &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#ignition&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 is a multi-tier VM. Its first tier is called &lt;a href=&quot;https://v8.dev/docs/ignition&quot;&gt;Ignition&lt;/a&gt;, it is a bytecode stack machine with an accumulator register. V8 starts by compiling the code to &lt;a href=&quot;https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775&quot;&gt;Ignition bytecodes&lt;/a&gt;. The above call is compiled to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0d              LdaUndefined              ;; Load undefined into the accumulator
26 f9           Star r2                   ;; Store it in register r2
13 01 00        LdaGlobal [1]             ;; Load global pointed by const 1 (add42)
26 fa           Star r1                   ;; Store it in register r1
0c 03           LdaSmi [3]                ;; Load small integer 3 into the accumulator
26 f8           Star r3                   ;; Store it in register r3
5f fa f9 02     CallNoFeedback r1, r2-r3  ;; Invoke call
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first argument of a call is usually referred to as the receiver. The receiver is the &lt;code&gt;this&lt;/code&gt; object inside a JSFunction, and every JS function call must have one. The bytecode handler of &lt;code&gt;CallNoFeedback&lt;/code&gt; needs to call the object &lt;code&gt;r1&lt;/code&gt; with the arguments in the register list &lt;code&gt;r2-r3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before we dive into the bytecode handler, note how registers are encoded in the bytecode. They are negative single byte integers: &lt;code&gt;r1&lt;/code&gt; is encoded as &lt;code&gt;fa&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; as &lt;code&gt;f9&lt;/code&gt; and &lt;code&gt;r3&lt;/code&gt; as &lt;code&gt;f8&lt;/code&gt;. We can refer to any register ri as &lt;code&gt;fb - i&lt;/code&gt;, actually as we will see, the correct encoding is &lt;code&gt;- 2 - kFixedFrameHeaderSize - i&lt;/code&gt;. Register lists are encoded using the first register and the size of the list, so &lt;code&gt;r2-r3&lt;/code&gt; is &lt;code&gt;f9 02&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many bytecode call handlers in Ignition. You can see a list of them &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/interpreter/bytecodes.h;drc=3965dcd5cb1141c90f32706ac7c965dc5c1c55b3;l=184&quot;&gt;here&lt;/a&gt;. They vary slightly from each other. There are bytecodes optimized for calls with an &lt;code&gt;undefined&lt;/code&gt; receiver, for property calls, for calls with a fixed number of parameters or for generic calls. Here we analyze &lt;code&gt;CallNoFeedback&lt;/code&gt; which is a generic call in which we don’t accumulate feedback from the execution.&lt;/p&gt;
&lt;p&gt;The handler of this bytecode is quite simple. It is written in &lt;a href=&quot;https://v8.dev/docs/csa-builtins&quot;&gt;&lt;code&gt;CodeStubAssembler&lt;/code&gt;&lt;/a&gt;, you can check it out &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/interpreter/interpreter-generator.cc;drc=6cdb24a4ce9d4151035c1f133833137d2e2881d1;l=1467&quot;&gt;here&lt;/a&gt;. Essentially, it tailcalls to an architecture-dependent built-in &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/x64/builtins-x64.cc;drc=8665f09771c6b8220d6020fe9b1ad60a4b0b6591;l=1277&quot;&gt;&lt;code&gt;InterpreterPushArgsThenCall&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The built-in essentially pops the return address to a temporary register, pushes all the arguments (including the receiver) and pushes back the return address. At this point, we do not know if the callee is a callable object nor how many arguments the callee is expecting, i.e., its formal parameter count.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/normal-push.svg&quot; alt=&quot;&quot; width=&quot;422&quot; height=&quot;191&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;State of the frame after the execution of &lt;code&gt;InterpreterPushArgsThenCall&lt;/code&gt; built-in.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Eventually the execution tailcalls to the built-in &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/x64/builtins-x64.cc;drc=8665f09771c6b8220d6020fe9b1ad60a4b0b6591;l=2256&quot;&gt;&lt;code&gt;Call&lt;/code&gt;&lt;/a&gt;. There, it checks if the target is a proper function, a constructor or any callable object. It also reads the &lt;code&gt;shared function info&lt;/code&gt; structure to get its formal parameter count.&lt;/p&gt;
&lt;p&gt;If the callee is a function object, it tailcalls to the built-in &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/x64/builtins-x64.cc;drc=8665f09771c6b8220d6020fe9b1ad60a4b0b6591;l=2038&quot;&gt;&lt;code&gt;CallFunction&lt;/code&gt;&lt;/a&gt;, where a bunch of checks happen, including if we have an &lt;code&gt;undefined&lt;/code&gt; object as receiver. If we have an &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; object as receiver, we should patch it to refer to the global proxy object, according to the &lt;a href=&quot;https://262.ecma-international.org/11.0/#sec-ordinarycallbindthis&quot;&gt;ECMA specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The execution then tailcalls to the built-in &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/codegen/x64/macro-assembler-x64.cc;drc=a723767935dec385818d1134ea729a4c3a3ddcfb;l=2781&quot;&gt;&lt;code&gt;InvokeFunctionCode&lt;/code&gt;&lt;/a&gt;, which will in the absence of arguments mismatch just call whatever is being pointed by the field &lt;code&gt;Code&lt;/code&gt; in the callee object. This could either be an optimized function or the built-in &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/x64/builtins-x64.cc;drc=8665f09771c6b8220d6020fe9b1ad60a4b0b6591;l=1037&quot;&gt;&lt;code&gt;InterpreterEntryTrampoline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If we assume we’re calling a function that hasn’t been optimized yet, the Ignition trampoline will set up an &lt;code&gt;IntepreterFrame&lt;/code&gt;. You can see a brief summary of the frame types in V8 &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/execution/frame-constants.h;drc=574ac5d62686c3de8d782dc798337ce1355dc066;l=14&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Without going into too much detail of what happens next, we can see a snapshot of the interpreter frame during the callee execution.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/normal-frame.svg&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;511&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;The &lt;code&gt;InterpreterFrame&lt;/code&gt; for the call &lt;code&gt;add42(3)&lt;/code&gt;.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We see that we have a fixed number of slots in the frame: the return address, the previous frame pointer, the context, the current function object we’re executing, the bytecode array of this function and the offset of the current bytecode we’re executing. Finally, we have a list of registers dedicated to this function (you can think of them as function locals). The &lt;code&gt;add42&lt;/code&gt; function doesn’t actually have any registers, but the caller has a similar frame with 3 registers.&lt;/p&gt;
&lt;p&gt;As expected add42 is a simple function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;25 02             Ldar a0          ;; Load the first argument to the accumulator
40 2a 00          AddSmi [42]      ;; Add 42 to it
ab                Return           ;; Return the accumulator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how we encode the argument in the &lt;code&gt;Ldar&lt;/code&gt; &lt;em&gt;(Load Accumulator Register)&lt;/em&gt; bytecode: argument &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;a0&lt;/code&gt;) is encoded with the number &lt;code&gt;02&lt;/code&gt;. In fact, the encoding of any argument is simply &lt;code&gt;[ai] = 2 + parameter_count - i - 1&lt;/code&gt; and the receiver &lt;code&gt;[this] = 2 + parameter_count&lt;/code&gt;, or in this example &lt;code&gt;[this] = 3&lt;/code&gt;. The parameter count here does not include the receiver.&lt;/p&gt;
&lt;p&gt;We’re now able to understand why we encode registers and arguments this way. They simply denote an offset from the frame pointer. We can then treat argument/register load and store in the same way. The offset for the last argument from the frame pointer is &lt;code&gt;2&lt;/code&gt; (previous frame pointer and the return address). That explains the &lt;code&gt;2&lt;/code&gt; in the encoding. The fixed part of the interpreter frame is &lt;code&gt;6&lt;/code&gt; slots (&lt;code&gt;4&lt;/code&gt; from the frame pointer), so the register zero is located at offset &lt;code&gt;-5&lt;/code&gt;, i.e. &lt;code&gt;fb&lt;/code&gt;, register &lt;code&gt;1&lt;/code&gt; at &lt;code&gt;fa&lt;/code&gt;. Clever, right?&lt;/p&gt;
&lt;p&gt;Note however to be able to access the arguments, the function must know how many arguments are in the stack! The index &lt;code&gt;2&lt;/code&gt; points to the last argument regardless of how many arguments there are!&lt;/p&gt;
&lt;p&gt;The bytecode handler of &lt;code&gt;Return&lt;/code&gt; will finish by calling the built-in &lt;code&gt;LeaveInterpreterFrame&lt;/code&gt;. This built-in essentially reads the function object to get the parameter count from the frame, pops the current frame, recovers the frame pointer, saves the return address in a scratch register, pops the arguments according to the parameter count and jumps to the address in the scratch registers.&lt;/p&gt;
&lt;p&gt;All this flow is great! But what happens when we call a function with fewer or more arguments than its parameter count? The clever argument/register access will fail and how do we clean up the arguments at the end of the call?&lt;/p&gt;
&lt;h2 id=&quot;arguments-adaptor-frame&quot;&gt;Arguments adaptor frame &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#arguments-adaptor-frame&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s now call &lt;code&gt;add42&lt;/code&gt; with fewer and more arguments:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The JS developers between us will know that in the first case, &lt;code&gt;x&lt;/code&gt; will be assigned &lt;code&gt;undefined&lt;/code&gt; and the function will return &lt;code&gt;undefined + 42 = NaN&lt;/code&gt;. In the second case, &lt;code&gt;x&lt;/code&gt; will be assigned &lt;code&gt;1&lt;/code&gt; and the function will return &lt;code&gt;43&lt;/code&gt;, the remaining arguments will be ignored. Note that the caller does not know if that will happen. Even if the caller checks the parameter count, the callee could use the rest parameter or the arguments object to access all the other arguments. Actually, the arguments object can even be accessed outside &lt;code&gt;add42&lt;/code&gt; in sloppy mode.&lt;/p&gt;
&lt;p&gt;If we follow the same steps as before, we will first call the built-in &lt;code&gt;InterpreterPushArgsThenCall&lt;/code&gt;. It will push the arguments to the stack like so:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/adaptor-push.svg&quot; alt=&quot;&quot; width=&quot;679&quot; height=&quot;276&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;State of the frames after the execution of &lt;code&gt;InterpreterPushArgsThenCall&lt;/code&gt; built-in.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Continuing the same procedure as before, we check if the callee is a function object, get its parameter count and patch the receiver to the global proxy. Eventually we reach &lt;code&gt;InvokeFunctionCode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here instead of jumping to the &lt;code&gt;Code&lt;/code&gt; in the callee object. We check that we have a mismatch between argument size and parameter count and jump to &lt;code&gt;ArgumentsAdaptorTrampoline&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this built-in, we build an extra frame, the infamous arguments adaptor frame. Instead of explaining what happens inside the built-in, I will just present you the state of the frame before the built-in calls the callee’s &lt;code&gt;Code&lt;/code&gt;. Note that this is a proper &lt;code&gt;x64 call&lt;/code&gt; (not a &lt;code&gt;jmp&lt;/code&gt;) and after the execution of the callee we will return to the &lt;code&gt;ArgumentsAdaptorTrampoline&lt;/code&gt;. This is a contrast with &lt;code&gt;InvokeFunctionCode&lt;/code&gt; that tailcalls.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/adaptor-frames.svg&quot; alt=&quot;&quot; width=&quot;767&quot; height=&quot;665&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Stack frames with arguments adaptation.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;You can see that we create another frame that copies all the arguments necessary in order to have precisely the parameter count of arguments on top of the callee frame. It creates an interface to the callee function, so that the latter does not need to know the number of arguments. The callee will always be able to access its parameters with the same calculation as before, that is, &lt;code&gt;[ai] = 2 + parameter_count - i - 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;V8 has special built-ins that understand the adaptor frame whenever it needs to access the remaining arguments through the rest parameter or the arguments object. They will always need to check the adaptor frame type on top of the callee’s frame and then act accordingly.&lt;/p&gt;
&lt;p&gt;As you can see, we solve the argument/register access issue, but we create a lot of complexity. Every built-in that needs to access all the arguments will need to understand and check the existence of the adaptor frame. Not only that, we need to be careful to not access stale and old data. Consider the following changes to &lt;code&gt;add42&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bytecode array now is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;25 02             Ldar a0       ;; Load the first argument to the accumulator
40 2a 00          AddSmi [42]   ;; Add 42 to it
26 02             Star a0       ;; Store accumulator in the first argument slot
ab                Return        ;; Return the accumulator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we now modify &lt;code&gt;a0&lt;/code&gt;. So, in the case of a call &lt;code&gt;add42(1, 2, 3)&lt;/code&gt; the slot in the arguments adaptor frame will be modified, but the caller frame will still contain the number &lt;code&gt;1&lt;/code&gt;. We need to be careful that the arguments object is accessing the modified value instead of the stale one.&lt;/p&gt;
&lt;p&gt;Returning from the function is simple, albeit slow. Remember what &lt;code&gt;LeaveInterpreterFrame&lt;/code&gt; does? It basically pops the callee frame and the arguments up to the parameter count number. So when we return to the arguments adaptor stub, the stack looks like so:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/adaptor-frames-cleanup.svg&quot; alt=&quot;&quot; width=&quot;765&quot; height=&quot;401&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;State of the frames after the execution of the callee &lt;code&gt;add42&lt;/code&gt;.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We just need to pop the number of arguments, pop the adaptor frame, pop all the arguments according to the actual arguments count and return to the caller execution.&lt;/p&gt;
&lt;p&gt;TL;DR: the arguments adaptor machinery is not only complex, but costly.&lt;/p&gt;
&lt;h2 id=&quot;removing-the-arguments-adaptor-frame&quot;&gt;Removing the arguments adaptor frame &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#removing-the-arguments-adaptor-frame&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Can we do better? Can we remove the adaptor frame? It turns out that we can indeed.&lt;/p&gt;
&lt;p&gt;Let’s review our requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to be able to access the arguments and registers seamlessly like before. No checks can be done when accessing them. That would be too expensive.&lt;/li&gt;
&lt;li&gt;We need to be able to construct the rest parameter and the arguments object from the stack.&lt;/li&gt;
&lt;li&gt;We need to be able to easily clean up an unknown number of arguments when returning from a call.&lt;/li&gt;
&lt;li&gt;And, of course, we want to do that without an extra frame!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we want to eliminate the extra frame, then we need to decide where to put the arguments: either in the callee frame or in the caller frame.&lt;/p&gt;
&lt;h3 id=&quot;arguments-in-the-callee-frame&quot;&gt;Arguments in the callee frame &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#arguments-in-the-callee-frame&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s suppose we put the arguments in the callee frame. This seems actually a good idea, since whenever we pop the frame, we also pop all the arguments at once!&lt;/p&gt;
&lt;p&gt;The arguments would need to be located somewhere between the saved frame pointer and the end of the frame. It entails that the size of the frame will not be statically known. Accessing an argument will still be easy, it is a simple offset from the frame pointer. But accessing a register is now much more complicated, since it varies according to the number of the arguments.&lt;/p&gt;
&lt;p&gt;The stack pointer always points to the last register, we could then use it to access the registers without knowing the arguments count. This approach might actually work, but it has a major drawback. That would entail duplicating all the bytecodes that can access registers and arguments. We would need a &lt;code&gt;LdaArgument&lt;/code&gt; and a &lt;code&gt;LdaRegister&lt;/code&gt; instead of simply &lt;code&gt;Ldar&lt;/code&gt;. Of course, we could also check if we are accessing an argument or a register (positive or negative offsets), but that would require a check in every argument and register access. Clearly too expensive!&lt;/p&gt;
&lt;h3 id=&quot;arguments-in-the-caller-frame&quot;&gt;Arguments in the caller frame &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#arguments-in-the-caller-frame&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Okay… what if we stick with the arguments in the caller frame?&lt;/p&gt;
&lt;p&gt;Remember how to calculate the offset of the argument &lt;code&gt;i&lt;/code&gt; in a frame: &lt;code&gt;[ai] = 2 + parameter_count - i - 1&lt;/code&gt;. If we have all arguments (not only the parameters), the offset will be &lt;code&gt;[ai] = 2 + argument_count - i - 1&lt;/code&gt;. That is, for every argument access, we would need to load the actual argument count.&lt;/p&gt;
&lt;p&gt;But what happens if we reverse the arguments? Now the offset can be simply calculated as &lt;code&gt;[ai] = 2 + i&lt;/code&gt;. We don’t need to know how many arguments are in the stack, but if we can guarantee that we&#39;ll always have at least the parameter count of arguments in the stack, then we can always use this scheme to calculate the offset.&lt;/p&gt;
&lt;p&gt;In other words, the number of arguments pushed in the stack will always be the maximum between the number of arguments and the formal parameter count, and it will be padded with undefined objects if needed.&lt;/p&gt;
&lt;p&gt;This has yet another bonus! The receiver is always located in the same offset for any JS function, just above the return address: &lt;code&gt;[this] = 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a clean solution for our requirement number &lt;code&gt;1&lt;/code&gt; and number &lt;code&gt;4&lt;/code&gt;. What about the other two requirements? How can we construct the rest parameter and the arguments object? And how to clean the arguments in the stack when returning to the caller? For that we are only missing the argument count. We will need to save it somewhere. The choice here is a bit arbitrary, as long as it is easy to access this information. Two basic choices are: to push it just after the receiver in the caller frame or as part of the callee frame in the fixed header part. We implemented the latter, since it coalesces the fixed header part of Interpreter and Optimized frames.&lt;/p&gt;
&lt;p&gt;If we run our example in V8 v8.9 we will see the following stack after &lt;code&gt;InterpreterArgsThenPush&lt;/code&gt; (note that the arguments are now reversed):&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/no-adaptor-push.svg&quot; alt=&quot;&quot; width=&quot;679&quot; height=&quot;276&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;State of the frames after the execution of &lt;code&gt;InterpreterPushArgsThenCall&lt;/code&gt; built-in.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;All the execution follows a similar path until we reach InvokeFunctionCode. Here we massage the arguments in case of under-application, pushing as many undefined objects as needed. Note that we do not change anything in case of over-application. Finally we pass the number of arguments to callee’s &lt;code&gt;Code&lt;/code&gt; through a register. In the case of &lt;code&gt;x64&lt;/code&gt;, we use the register &lt;code&gt;rax&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the callee hasn’t been optimized yet, we reach &lt;code&gt;InterpreterEntryTrampoline&lt;/code&gt;, which builds the following stack frame.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/adaptor-frame/no-adaptor-frames.svg&quot; alt=&quot;&quot; width=&quot;679&quot; height=&quot;626&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Stack frames without arguments adaptors.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The callee frame has an extra slot containing the number of arguments that can be used for constructing the rest parameter or the arguments object and to clean the arguments in the stack before returning to the caller.&lt;/p&gt;
&lt;p&gt;To return, we modify &lt;code&gt;LeaveInterpreterFrame&lt;/code&gt; to read the arguments count in the stack and pop out the maximum number between the argument count and the formal parameter count.&lt;/p&gt;
&lt;h2 id=&quot;turbofan&quot;&gt;TurboFan &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#turbofan&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What about optimized code? Let’s change slightly our initial script to force V8 to compile it with TurboFan:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;callAdd42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PrepareFunctionForOptimization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callAdd42&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;callAdd42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OptimizeFunctionOnNextCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callAdd42&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;callAdd42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use V8 intrinsics to force V8 to optimize the call, otherwise V8 would only optimize our little function if it becomes hot (used very often). We call it once before optimization to gather some type information that can be used to guide the compilation. Read more about TurboFan &lt;a href=&quot;https://v8.dev/docs/turbofan&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll show you here only the part of the generated code that is relevant to us.&lt;/p&gt;
&lt;pre class=&quot;language-nasm&quot;&gt;&lt;code class=&quot;language-nasm&quot;&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rdi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1a8e082126ad&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;;; Load the function object &amp;lt;JSFunction add42&gt;&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x6&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;;; Push SMI 3 as argument&lt;/span&gt;&lt;br /&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1a8e082030d1&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;;; &amp;lt;JSGlobal Object&gt;&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;;; Push receiver (the global proxy object)&lt;/span&gt;&lt;br /&gt;movl &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;               &lt;span class=&quot;token comment&quot;&gt;;; Save the arguments count in rax&lt;/span&gt;&lt;br /&gt;movl &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;;; Load function object {Code} field in rcx&lt;/span&gt;&lt;br /&gt;call &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;;; Finally, call the code object!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although written in assembler, this code snippet should not be difficult to read if you follow my comments. Essentially, when compiling the call, TF needs to do all the work that was done in &lt;code&gt;InterpreterPushArgsThenCall&lt;/code&gt;, &lt;code&gt;Call&lt;/code&gt;, &lt;code&gt;CallFunction&lt;/code&gt; and &lt;code&gt;InvokeFunctionCall&lt;/code&gt; built-ins. Hopefully it has more static information to do that and emit less computer instructions.&lt;/p&gt;
&lt;h3 id=&quot;turbofan-with-the-arguments-adaptor-frame&quot;&gt;TurboFan with the arguments adaptor frame &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#turbofan-with-the-arguments-adaptor-frame&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now, let’s see in the case of mismatching number of arguments and parameter count. Consider the call &lt;code&gt;add42(1, 2, 3)&lt;/code&gt;. This is compiled to:&lt;/p&gt;
&lt;pre class=&quot;language-nasm&quot;&gt;&lt;code class=&quot;language-nasm&quot;&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rdi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x4250820fff1&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;;; Load the function object &amp;lt;JSFunction add42&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;; Push receiver and arguments SMIs 1, 2 and 3&lt;/span&gt;&lt;br /&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x42508080dd5&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;;; &amp;lt;JSGlobal Object&gt;&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x2&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x4&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x6&lt;/span&gt;&lt;br /&gt;movl &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x3&lt;/span&gt;              &lt;span class=&quot;token comment&quot;&gt;;; Save the arguments count in rax&lt;/span&gt;&lt;br /&gt;movl &lt;span class=&quot;token register variable&quot;&gt;rbx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;              &lt;span class=&quot;token comment&quot;&gt;;; Save the formal parameters count in rbx&lt;/span&gt;&lt;br /&gt;movq &lt;span class=&quot;token register variable&quot;&gt;r10&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x564ed7fdf840&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;;; &amp;lt;ArgumentsAdaptorTrampoline&gt;&lt;/span&gt;&lt;br /&gt;call &lt;span class=&quot;token register variable&quot;&gt;r10&lt;/span&gt;                  &lt;span class=&quot;token comment&quot;&gt;;; Call the ArgumentsAdaptorTrampoline&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, it is not hard to add support to TF for argument and parameter count mismatch. Just call the arguments adaptor trampoline!&lt;/p&gt;
&lt;p&gt;This is however expensive. For every optimized call, we now need to enter in the arguments adaptor trampoline and massage the frame as in non-optimized code. That explains why the performance gain of removing the adaptor frame in optimized code is much larger than on Ignition.&lt;/p&gt;
&lt;p&gt;The generated code is however very simple. And returning from it is extremely easy (epilogue):&lt;/p&gt;
&lt;pre class=&quot;language-nasm&quot;&gt;&lt;code class=&quot;language-nasm&quot;&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rsp&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;rbp&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;;; Clean callee frame&lt;/span&gt;&lt;br /&gt;pop &lt;span class=&quot;token register variable&quot;&gt;rbp&lt;/span&gt;&lt;br /&gt;ret &lt;span class=&quot;token number&quot;&gt;0x8&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;;; Pops a single argument (the receiver)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We pop our frame and emit a return instruction according to the parameter count. If we have a mismatch in the number of arguments and parameter count, the adaptor frame trampoline will deal with it.&lt;/p&gt;
&lt;h3 id=&quot;turbofan-without-the-arguments-adaptor-frame&quot;&gt;TurboFan without the arguments adaptor frame &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#turbofan-without-the-arguments-adaptor-frame&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The generated code is essentially the same as in a call with a matching number of arguments. Consider the call &lt;code&gt;add42(1, 2, 3)&lt;/code&gt;. This generates:&lt;/p&gt;
&lt;pre class=&quot;language-nasm&quot;&gt;&lt;code class=&quot;language-nasm&quot;&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rdi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x35ac082126ad&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;;; Load the function object &amp;lt;JSFunction add42&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;; Push receiver and arguments 1, 2 and 3 (reversed)&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x6&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x4&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token number&quot;&gt;0x2&lt;/span&gt;&lt;br /&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x35ac082030d1&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;;; &amp;lt;JSGlobal Object&gt;&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;&lt;br /&gt;movl &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x3&lt;/span&gt;               &lt;span class=&quot;token comment&quot;&gt;;; Save the arguments count in rax&lt;/span&gt;&lt;br /&gt;movl &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;;; Load function object {Code} field in rcx&lt;/span&gt;&lt;br /&gt;call &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;;; Finally, call the code object!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What about the epilogue of the function? We are not going back to the arguments adaptor trampoline anymore, so the epilogue is indeed a bit more complex than before.&lt;/p&gt;
&lt;pre class=&quot;language-nasm&quot;&gt;&lt;code class=&quot;language-nasm&quot;&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;;; Load the argument count (from callee frame) to rcx&lt;/span&gt;&lt;br /&gt;movq &lt;span class=&quot;token register variable&quot;&gt;rsp&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;rbp&lt;/span&gt;               &lt;span class=&quot;token comment&quot;&gt;;; Pop out callee frame&lt;/span&gt;&lt;br /&gt;pop &lt;span class=&quot;token register variable&quot;&gt;rbp&lt;/span&gt;&lt;br /&gt;cmpq &lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x0&lt;/span&gt;               &lt;span class=&quot;token comment&quot;&gt;;; Compare arguments count with formal parameter count&lt;/span&gt;&lt;br /&gt;jg &lt;span class=&quot;token number&quot;&gt;0x35ac000840c6&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x86&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;; If arguments count is smaller (or equal) than the formal parameter count:&lt;/span&gt;&lt;br /&gt;ret &lt;span class=&quot;token number&quot;&gt;0x8&lt;/span&gt;                    &lt;span class=&quot;token comment&quot;&gt;;; Return as usual (parameter count is statically known)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;;; If we have more arguments in the stack than formal parameters:&lt;/span&gt;&lt;br /&gt;pop &lt;span class=&quot;token register variable&quot;&gt;r10&lt;/span&gt;                    &lt;span class=&quot;token comment&quot;&gt;;; Save the return address&lt;/span&gt;&lt;br /&gt;leaq &lt;span class=&quot;token register variable&quot;&gt;rsp&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;;; Pop all arguments according to rcx&lt;/span&gt;&lt;br /&gt;push &lt;span class=&quot;token register variable&quot;&gt;r10&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;;; Recover the return address&lt;/span&gt;&lt;br /&gt;retl&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/adaptor-frame/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The arguments adaptor frame was an ad-hoc solution to calls with a mismatch number of arguments and formal parameters. It was a straightforward solution, but it came with high performance cost and added complexity to the codebase. The performance cost is nowadays exacerbated by many Web frameworks using this feature to create a more flexible API. The simple idea of reversing the arguments in the stack allowed a significant reduction in implementation complexity and removed almost the entire overhead for such calls.&lt;/p&gt;
</content></entry><entry><title>V8 release v8.9</title><link href="https://v8.js.cn/blog/v8-release-89/"/><updated>2021-02-04T00:00:00Z</updated><id>https://v8.js.cn/blog/v8-release-89/</id><author><name>Ingvar Stepanyan, awaiting a call</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/8.9&quot;&gt;V8 version 8.9&lt;/a&gt;, which is in beta until its release in coordination with Chrome 89 Stable in several weeks. V8 v8.9 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-89/#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;top-level-await&quot;&gt;Top-level &lt;code&gt;await&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-89/#top-level-await&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.dev/features/top-level-await&quot;&gt;Top-level &lt;code&gt;await&lt;/code&gt;&lt;/a&gt; is available in the &lt;a href=&quot;https://www.chromium.org/blink&quot;&gt;Blink rendering engine&lt;/a&gt; 89, a primary embedder of V8.&lt;/p&gt;
&lt;p&gt;In standalone V8, top-level &lt;code&gt;await&lt;/code&gt; remains behind the &lt;code&gt;--harmony-top-level-await&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://v8.dev/features/top-level-await&quot;&gt;our explainer&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-89/#performance&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;faster-calls-with-arguments-size-mismatch&quot;&gt;Faster calls with arguments size mismatch &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-89/#faster-calls-with-arguments-size-mismatch&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JavaScript allows calling a function with a different number of arguments than the expected number of parameters, i.e., one can pass either fewer or more arguments than the declared formal parameters. The former case is called under-application and the latter is called over-application.&lt;/p&gt;
&lt;p&gt;In the under-application case, the remaining parameters get assigned to the &lt;code&gt;undefined&lt;/code&gt; value. In the over-application case, the remaining arguments can be either accessed by using the rest parameter and the &lt;code&gt;Function.prototype.arguments&lt;/code&gt; property, or they are simply superfluous and ignored. Many web and Node.js frameworks nowadays use this JS feature to accept optional parameters and create a more flexible API.&lt;/p&gt;
&lt;p&gt;Until recently, V8 had a special machinery to deal with arguments size mismatch: the arguments adaptor frame. Unfortunately, argument adaption comes at a performance cost and is commonly needed in modern front-end and middleware frameworks. It turns out that with a clever design (like reversing the order of the arguments in the stack), we can remove this extra frame, simplify the V8 codebase, and get rid of the overhead almost entirely.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/v8-release-89/perf.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Performance impact of removing the arguments adaptor frame, as measured through a micro-benchmark.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The graph shows that there is no overhead anymore when running on &lt;a href=&quot;https://v8.dev/blog/jitless&quot;&gt;JIT-less mode&lt;/a&gt; (Ignition) with a 11.2% performance improvement. When using TurboFan, we get up to 40% speedup. The overhead compared to the no mismatch case is due to a small optimization in the &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/backend/x64/code-generator-x64.cc;l=4905;drc=5056f555010448570f7722708aafa4e55e1ad052&quot;&gt;function epilogue&lt;/a&gt;. For more details, see &lt;a href=&quot;https://docs.google.com/document/d/15SQV4xOhD3K0omGJKM-Nn8QEaskH7Ir1VYJb9_5SjuM/edit&quot;&gt;the design document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to learn more about the details behind those improvements, check out the &lt;a href=&quot;https://v8.dev/blog/adaptor-frame&quot;&gt;dedicated blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-89/#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/8.8..branch-heads/8.9 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 8.9 -t branch-heads/8.9&lt;/code&gt; to experiment with the new features in V8 v8.9. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>An additional non-backtracking RegExp engine</title><link href="https://v8.js.cn/blog/non-backtracking-regexp/"/><updated>2021-01-11T00:00:00Z</updated><id>https://v8.js.cn/blog/non-backtracking-regexp/</id><author><name>Martin Bidlingmaier</name></author><content type="html">&lt;p&gt;Starting with v8.8, V8 ships with a new experimental non-backtracking RegExp engine (in addition to the existing &lt;a href=&quot;https://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html&quot;&gt;Irregexp engine&lt;/a&gt;) which guarantees execution in linear time with respect to the size of the subject string. The experimental engine is available behind the feature flags mentioned below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/non-backtracking-regexp/runtime-plot.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Runtime of &lt;code&gt;/(a*)*b/.exec(&#39;a&#39;.repeat(n))&lt;/code&gt; for n ≤ 100&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Here’s how you can configure the new RegExp engine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--enable-experimental-regexp_engine-on-excessive-backtracks&lt;/code&gt; enables the fallback to the non-backtracking engine on excessive backtracks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--regexp-backtracks-before-fallback N&lt;/code&gt; (default N = 50,000) specifies how many backtracks are considered “excessive”, i.e. when the fallback kicks in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--enable-experimental-regexp-engine&lt;/code&gt; turns on recognition of the non-standard &lt;code&gt;l&lt;/code&gt; (“linear”) flag for RegExps, as in e.g. &lt;code&gt;/(a*)*b/l&lt;/code&gt;. RegExps constructed with this flag are always eagerly executed with the new engine; Irregexp is not involved at all. If the new RegExp engine can’t handle the pattern of an &lt;code&gt;l&lt;/code&gt;-RegExp, then an exception is thrown at construction. We hope that this feature can at some point be used for hardening of apps that run RegExps on untrusted input. For now it remains experimental because Irregexp is orders of magnitude faster than the new engine on most common patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fallback mechanism does not apply to all patterns. For the fallback mechanism to kick in, the RegExp must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not contain backreferences,&lt;/li&gt;
&lt;li&gt;not contain lookaheads or lookbehinds,&lt;/li&gt;
&lt;li&gt;not contain large or deeply nested finite repetitions, as in e.g. &lt;code&gt;/a{200,500}/&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;not have the &lt;code&gt;u&lt;/code&gt; (Unicode) or &lt;code&gt;i&lt;/code&gt; (case insensitive) flags set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;background%3A-catastrophic-backtracking&quot;&gt;Background: catastrophic backtracking &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/non-backtracking-regexp/#background%3A-catastrophic-backtracking&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;RegExp matching in V8 is handled by the Irregexp engine. Irregexp jit-compiles RegExps to specialized native code (or &lt;a href=&quot;https://v8.js.cn/blog/non-backtracking-regexp/blog/regexp-tier-up&quot;&gt;bytecode&lt;/a&gt;) and is thus extremely fast for most patterns. For some patterns, however, Irregexp’s runtime can blow up exponentially in the size of the input string. The example above, &lt;code&gt;/(a*)*b/.exec(&#39;a&#39;.repeat(100))&lt;/code&gt;, does not finish within our lifetimes if executed by Irregexp.&lt;/p&gt;
&lt;p&gt;So what’s going on here? Irregexp is a &lt;em&gt;backtracking&lt;/em&gt; engine. When faced with a choice of how a match can continue, Irregexp explores the first alternative in its entirety, and then backtracks if necessary to explore the second alternative. Consider for instance matching the pattern &lt;code&gt;/abc|[az][by][0-9]/&lt;/code&gt; against the subject string &lt;code&gt;&#39;ab3&#39;&lt;/code&gt;. Here Irregexp tries to match &lt;code&gt;/abc/&lt;/code&gt; first and fails after the second character. It then backtracks by two characters and successfully matches the second alternative &lt;code&gt;/[az][by][0-9]/&lt;/code&gt;. In patterns with quantifiers such as &lt;code&gt;/(abc)*xyz/&lt;/code&gt;, Irregexp has to choose after a match of the body whether to match the body again or to continue with the remaining pattern.&lt;/p&gt;
&lt;p&gt;Let’s try to understand what’s going on when matching &lt;code&gt;/(a*)*b/&lt;/code&gt; against a smaller subject string, say &lt;code&gt;&#39;aaa&#39;&lt;/code&gt;. This pattern contains nested quantifiers, so we’re asking Irregexp to match a &lt;em&gt;sequence of sequences&lt;/em&gt; of &lt;code&gt;&#39;a&#39;&lt;/code&gt;, and then match &lt;code&gt;&#39;b&#39;&lt;/code&gt;. Clearly there is no match because the subject string does not contain &lt;code&gt;&#39;b&#39;&lt;/code&gt;. However, &lt;code&gt;/(a*)*/&lt;/code&gt; matches, and it does so in exponentially many different ways:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;aaa&#39;&lt;/span&gt;           &lt;span class=&quot;token string&quot;&gt;&#39;aa&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;           &lt;span class=&quot;token string&quot;&gt;&#39;aa&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;aa&#39;&lt;/span&gt;       &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;       &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br /&gt;…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A priori, Irregexp cannot rule out that the failure to match the final &lt;code&gt;/b/&lt;/code&gt; is due to choosing the wrong way of matching &lt;code&gt;/(a*)*/&lt;/code&gt;, so it has to try all variants. This problem is known as “exponential” or “catastrophic” backtracking.&lt;/p&gt;
&lt;h2 id=&quot;regexps-as-automata-and-bytecode&quot;&gt;RegExps as automata and bytecode &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/non-backtracking-regexp/#regexps-as-automata-and-bytecode&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To understand an alternative algorithm that is immune to catastrophic backtracking, we have to take a quick detour via &lt;a href=&quot;https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton&quot;&gt;automata&lt;/a&gt;. Every regular expression is equivalent to an automaton. For example, the RegExp &lt;code&gt;/(a*)*b/&lt;/code&gt; above corresponds to the following automaton:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/non-backtracking-regexp/example-automaton.svg&quot; alt=&quot;&quot; width=&quot;1067&quot; height=&quot;509&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Automaton corresponding to &lt;code&gt;/(a*)*b/&lt;/code&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Note that the automaton is not uniquely determined by the pattern; the one you see above is the automaton you will get by a mechanical translation process, and it’s the one that’s used inside the V8’s new RegExp engine for &lt;code&gt;/(a*)*/&lt;/code&gt;.&lt;br /&gt;
The unlabeled edges are epsilon transitions: They don’t consume input. Epsilon transitions are necessary to keep the size of the automaton at around the size of the pattern. Naively eliminating epsilon transitions can result in quadratic increase of the number of transitions.&lt;br /&gt;
Epsilon transitions also allow constructing the automaton corresponding to a RegExp from the following four basic kinds of states:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/non-backtracking-regexp/state-types.svg&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;260&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;RegExp bytecode instructions&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Here we only classify the transitions &lt;em&gt;out&lt;/em&gt; of the state, while the transitions into the state are still allowed to be arbitrary. Automata built from only these kinds of states can be represented as &lt;em&gt;bytecode programs&lt;/em&gt;, with every state corresponding to an instruction. For example, a state with two epsilon transitions is represented as a &lt;code&gt;FORK&lt;/code&gt; instruction.&lt;/p&gt;
&lt;h2 id=&quot;the-backtracking-algorithm&quot;&gt;The backtracking algorithm &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/non-backtracking-regexp/#the-backtracking-algorithm&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s revisit the backtracking algorithm that Irregexp is based upon and describe it in terms of automata. Suppose we’re given a bytecode array &lt;code&gt;code&lt;/code&gt; corresponding to the pattern and want to &lt;code&gt;test&lt;/code&gt; whether an &lt;code&gt;input&lt;/code&gt; matches the pattern. Let’s assume that &lt;code&gt;code&lt;/code&gt; looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FORK&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; forkPc&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CONSUME&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; char&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CONSUME&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; char&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;JMP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; jmpPc&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CONSUME&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; char&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CONSUME&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; char&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;opcode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ACCEPT&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This bytecode corresponds to the (sticky) pattern &lt;code&gt;/12|ab/y&lt;/code&gt;. The &lt;code&gt;forkPc&lt;/code&gt; field of the &lt;code&gt;FORK&lt;/code&gt; instruction is the index (“program counter”) of the alternative state/instruction that we can continue at, and similarly for &lt;code&gt;jmpPc&lt;/code&gt;. Indices are zero-based. The backtracking algorithm can now be implemented in JavaScript as follows.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Input position.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Program counter: index of the next instruction.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Backtrack stack.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inst &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CONSUME&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ip &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ip&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;char&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Input matches what we expect: Continue.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;ip&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Wrong input character, but we can backtrack.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; back &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        ip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; back&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ip&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        pc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; back&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Wrong character, cannot backtrack.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FORK&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Save alternative for backtracking later.&lt;/span&gt;&lt;br /&gt;      stack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ip&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ip&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pc&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;forkPc&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;JMP&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      pc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jmpPc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ACCEPT&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This implementation loops indefinitely if the bytecode program contains loops that do not consume any character, i.e. if the automaton contains a loop consisting of epsilon transitions only. This issue can be solved with lookahead by a single character. Irregexp is much more sophisticated than this simple implementation, but ultimately based on the same algorithm.&lt;/p&gt;
&lt;h2 id=&quot;the-non-backtracking-algorithm&quot;&gt;The non-backtracking algorithm &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/non-backtracking-regexp/#the-non-backtracking-algorithm&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The backtracking algorithm corresponds to &lt;em&gt;depth-first&lt;/em&gt; traversal of the automaton: We always explore the first alternative of a &lt;code&gt;FORK&lt;/code&gt; statement in its entirety and then backtrack to the second alternative if necessary. The alternative to it, the non-backtracking algorithm, is thus unsurprisingly based on &lt;em&gt;breadth-first&lt;/em&gt; traversal of the automaton. Here we consider all alternatives simultaneously, in lockstep with respect to the current position in the input string. We thus maintain a list of current states, and then advance all states by taking transitions corresponding to each input character. Crucially, we remove duplicates from the list of current states.&lt;/p&gt;
&lt;p&gt;A simple implementation in JavaScript looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Input position.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// List of current pc values, or `&#39;ACCEPT&#39;` if we’ve found a match. We start at&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// pc 0 and follow epsilon transitions.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pcs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;followEpsilons&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// We’re done if we’ve found a match…&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pcs &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ACCEPT&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …or if we’ve exhausted the input string.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ip &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Continue only with the pcs that CONSUME the correct character.&lt;/span&gt;&lt;br /&gt;  pcs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;char &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ip&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Advance the remaining pcs to the next instruction.&lt;/span&gt;&lt;br /&gt;  pcs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; pc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Follow epsilon transitions.&lt;/span&gt;&lt;br /&gt;  pcs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;followEpsilons&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pcs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;ip&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;followEpsilons&lt;/code&gt; is a function that takes a list of program counters and computes the list of program counters at &lt;code&gt;CONSUME&lt;/code&gt; instructions that can be reached via epsilon transitions (i.e. by only executing FORK and JMP). The returned list must not contain duplicates. If an &lt;code&gt;ACCEPT&lt;/code&gt; instruction can be reached, the function returns &lt;code&gt;&#39;ACCEPT&#39;&lt;/code&gt;. It can be implemented like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;followEpsilons&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;pcs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Set of pcs we’ve seen so far.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; visitedPcs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// We can ignore pc if we’ve seen it earlier.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;visitedPcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    visitedPcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inst &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CONSUME&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FORK&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        pcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;forkPc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;JMP&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        pcs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jmpPc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ACCEPT&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ACCEPT&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because of the elimination of duplicates via the &lt;code&gt;visitedPcs&lt;/code&gt; set, we know that every program counter is only examined once in &lt;code&gt;followEpsilons&lt;/code&gt;. This guarantees that the &lt;code&gt;result&lt;/code&gt; list does not contain duplicates, and that the runtime of &lt;code&gt;followEpsilons&lt;/code&gt; is bounded by the size of the &lt;code&gt;code&lt;/code&gt; array, i.e. the size of the pattern. &lt;code&gt;followEpsilons&lt;/code&gt; is called at most &lt;code&gt;input.length&lt;/code&gt; times, so the total runtime of RegExp matching is bounded by &lt;code&gt;𝒪(pattern.length * input.length)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The non-backtracking algorithm can be extended to support most features of JavaScript RegExps, for example word boundaries or the calculation of (sub)match boundaries. Unfortunately, backreferences, lookahead and lookbehind cannot be supported without major changes that alter asymptotic worst-case complexity.&lt;/p&gt;
&lt;p&gt;V8’s new RegExp engine is based on this algorithm and its implementation in the &lt;a href=&quot;https://github.com/google/re2&quot;&gt;re2&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/regex&quot;&gt;Rust regex&lt;/a&gt; libraries. The algorithm is discussed in much more depth than here in an excellent &lt;a href=&quot;https://swtch.com/~rsc/regexp/&quot;&gt;series of blog posts&lt;/a&gt; by Russ Cox, who is also the original author of the re2 library.&lt;/p&gt;
</content></entry><entry><title>V8 release v8.7</title><link href="https://v8.js.cn/blog/v8-release-87/"/><updated>2020-10-23T00:00:00Z</updated><id>https://v8.js.cn/blog/v8-release-87/</id><author><name>Ingvar Stepanyan (@RReverser), a V8 flag bearer</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/8.7&quot;&gt;V8 version 8.7&lt;/a&gt;, which is in beta until its release in coordination with Chrome 87 Stable in several weeks. V8 v8.7 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-87/#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;unsafe-fast-js-calls&quot;&gt;Unsafe fast JS calls &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-87/#unsafe-fast-js-calls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;V8 v8.7 comes with an enhanced API for doing native calls from JavaScript.&lt;/p&gt;
&lt;p&gt;The feature is still experimental and can be enabled through the &lt;code&gt;--turbo-fast-api-calls&lt;/code&gt; flag in V8 or the corresponding &lt;code&gt;--enable-unsafe-fast-js-calls&lt;/code&gt; flag in Chrome. It is designed to improve performance of some native graphics APIs in Chrome, but can also be used by other embedders. It provides new means for developers to create instances of &lt;code&gt;v8::FunctionTemplate&lt;/code&gt;, as is documented in this &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/include/v8-fast-api-calls.h&quot;&gt;header file&lt;/a&gt;. Functions created using the original API will remain unaffected.&lt;/p&gt;
&lt;p&gt;For more information and a list of available features, please see &lt;a href=&quot;https://docs.google.com/document/d/1nK6oW11arlRb7AA76lJqrBIygqjgdc92aXUPYecc9dU/edit?usp=sharing&quot;&gt;this explainer&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;atomics.waitasync&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-87/#atomics.waitasync&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-atomics-wait-async/blob/master/PROPOSAL.md&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt;&lt;/a&gt; is now available in V8 v8.7.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait&quot;&gt;&lt;code&gt;Atomics.wait&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify&quot;&gt;&lt;code&gt;Atomics.notify&lt;/code&gt;&lt;/a&gt; are low-level synchronization primitives useful for implementing mutexes and other means of synchronization. However, since &lt;code&gt;Atomics.wait&lt;/code&gt; is blocking, it’s not possible to call it on the main thread (trying to do so will throw a TypeError). The non-blocking version, &lt;a href=&quot;https://github.com/tc39/proposal-atomics-wait-async/blob/master/PROPOSAL.md&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt;&lt;/a&gt;, is usable also on the main thread.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://v8.dev/features/atomics&quot;&gt;our explainer on &lt;code&gt;Atomics&lt;/code&gt; APIs&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-87/#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/8.6..branch-heads/8.7 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 8.7 -t branch-heads/8.7&lt;/code&gt; to experiment with the new features in V8 v8.7. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Indicium: V8 runtime tracer tool</title><link href="https://v8.js.cn/blog/system-analyzer/"/><updated>2020-10-01T11:56:00Z</updated><id>https://v8.js.cn/blog/system-analyzer/</id><author><name>Zeynep Cankara (@ZeynepCankara)</name></author><content type="html">&lt;h1 id=&quot;indicium%3A-v8-system-analyzer&quot;&gt;Indicium: V8 system analyzer &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#indicium%3A-v8-system-analyzer&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The past three months have been an awesome learning experience for me as I&#39;ve joined the V8 team (Google London) as an intern, and have been working on a new tool called &lt;a href=&quot;https://v8.dev/tools/head/system-analyzer&quot;&gt;&lt;em&gt;Indicium&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This system analyzer is a unified web interface to trace, debug and analyse patterns of how Inline Caches (ICs) and Maps are created and modified in real-world applications.&lt;/p&gt;
&lt;p&gt;V8 already has a tracing infrastructure for &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;ICs&lt;/a&gt; and &lt;a href=&quot;https://v8.dev/blog/fast-properties&quot;&gt;Maps&lt;/a&gt; which can process and analyse IC events using the &lt;a href=&quot;https://v8.dev/tools/v8.7/ic-explorer.html&quot;&gt;IC Explorer&lt;/a&gt; and Map events using &lt;a href=&quot;https://v8.dev/tools/v8.7/map-processor.html&quot;&gt;Map Processor&lt;/a&gt;. However, previous tools didn&#39;t allow us to analyze maps and ICs holistically and this is now possible with system analyzer.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/indicium-logo.png&quot; alt=&quot;&quot; width=&quot;122&quot; height=&quot;145&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Indicium&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;case-study&quot;&gt;Case Study &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#case-study&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s go through an example to demonstrate how we can use the Indicium to analyse Map and IC log events in V8.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isNegative &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dotProduct&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// warmup&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10e5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dotProduct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10e6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dotProduct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10e6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dotProduct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we have a &lt;code&gt;Point&lt;/code&gt; class that stores two coordinates and an additional boolean based on the values of the co-ordinates. The &lt;code&gt;Point&lt;/code&gt; class has a &lt;code&gt;dotProduct&lt;/code&gt; method which returns the dot product between the passed object and the receiver.&lt;/p&gt;
&lt;p&gt;To make explaining the program easier, let’s break the program into two snippets (ignoring the warmup phase):&lt;/p&gt;
&lt;h3 id=&quot;snippet-1&quot;&gt;&lt;em&gt;snippet 1&lt;/em&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#snippet-1&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dotProduct&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10e6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dotProduct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;snippet-2&quot;&gt;&lt;em&gt;snippet 2&lt;/em&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#snippet-2&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10e6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dotProduct &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;snippet2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we run the program we notice a performance regression. Even though we are measuring the performance of two similar snippets; accessing the properties &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of &lt;code&gt;Point&lt;/code&gt; object instances by calling the &lt;code&gt;dotProduct&lt;/code&gt; function in a for-loop.&lt;/p&gt;
&lt;p&gt;Snippet 1 runs approximately 3 times faster than snippet 2. The only difference being that we use negative values for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; properties in the &lt;code&gt;Point&lt;/code&gt; object in snippet 2.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/initial-program-performance.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Performance analysis of snippets.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;To analyse this performance difference we can use various logging options that come with V8. This is where the system analyzer shines. It can display log events and link them together with map events letting us explore the magic that is hidden within V8.&lt;/p&gt;
&lt;p&gt;Before diving more into the case study, let’s get familiar with the panels of the system analyzer tool. The tool has four main panels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a Timeline panel to analyse Map/ICs events across time,&lt;/li&gt;
&lt;li&gt;a Map panel to visualise the transition trees of the maps,&lt;/li&gt;
&lt;li&gt;an IC panel to get statistics about the IC events,&lt;/li&gt;
&lt;li&gt;a Source panel to display Map/IC file positions on a script.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/system-analyzer-overview.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;System Analyzer Overview&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/case1_1.png&quot; alt=&quot;&quot; width=&quot;954&quot; height=&quot;706&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Group IC events by function name to get in depth information about the IC events associated with the &lt;code&gt;dotProduct&lt;/code&gt;.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We are analyzing how the function &lt;code&gt;dotProduct&lt;/code&gt; might be causing this performance difference. So we group IC events by functionName to get more in depth information about IC events associated with the &lt;code&gt;dotProduct&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The first thing we notice is that we have two different IC state transitions recorded by the IC events in this function. One going from uninitialised to monomorphic and the other one going from monomorphic to polymorphic. Polymorphic IC state indicates that now we are tracking more than one Map associated with &lt;code&gt;Point&lt;/code&gt; objects and this polymorphic state is worse as we have to perform additional checks.&lt;/p&gt;
&lt;p&gt;We want to know why we are creating multiple Map shapes for the same type of objects. To do so, we toggle the info button about IC state to get more information about the Map addresses going from uninitialised to monomorphic.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/case1_2.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;The map transition tree associated with the monomorphic IC state.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/case1_3.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;The map transition tree associated with the polymorphic IC state.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;For the monomorphic IC state we can visualise the transition tree and see that we are only dynamically adding two properties &lt;code&gt;x&lt;/code&gt;and &lt;code&gt;y&lt;/code&gt; but when it comes to polymorphic IC state, we have a new Map containing three properties &lt;code&gt;isNegative&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/case1_4.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;The Map panel communicates the file position information to highlight file positions on the Source panel.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We click on the file position section of the Map panel to see where this &lt;code&gt;isNegative&lt;/code&gt; property is added in the source code and can use this insight to address the performance regression.&lt;/p&gt;
&lt;p&gt;So now the question being &lt;em&gt;how can we address the performance regression by using the insight we generated from the tool&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;The minimal solution would be to always initialise the &lt;code&gt;isNegative&lt;/code&gt; property. In general, it is sound advice that all instance properties should be initialised in the constructor.&lt;/p&gt;
&lt;p&gt;Now, the updated &lt;code&gt;Point&lt;/code&gt; class looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isNegative &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;dotProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we execute the script again with the modified &lt;code&gt;Point&lt;/code&gt; class, we see that the execution of the two snippets defined at the beginning of the case study perform very similarly.&lt;/p&gt;
&lt;p&gt;In an updated trace, we see that the polymorphic IC state is avoided as we are not creating multiple maps for the same type of objects.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/case2_1.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;The map transition tree of the modified Point object.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;the-system-analyzer&quot;&gt;The System Analyzer &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#the-system-analyzer&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s now have an in-depth look at the different panels that are present in the system analyzer.&lt;/p&gt;
&lt;h3 id=&quot;timeline-panel&quot;&gt;Timeline Panel &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#timeline-panel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Timeline panel allows selection in time which enables visualization of IC/map states across discrete points in time or a selected range in time. It supports filtering features such as zoom in/out to the log events for selected time ranges.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/timeline-panel.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Timeline panel overview&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/timeline-panel2.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Timeline panel overview (Cont.)&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&quot;map-panel&quot;&gt;Map Panel &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#map-panel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Map panel has two sub panels:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Map details&lt;/li&gt;
&lt;li&gt;Map transitions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Map panel visualizes the transition trees of selected maps. The metadata of the selected map displayed through the map details sub-panel. A specific transition tree associated with a map address can be searched for using the provided interface. From the Stats sub-panel, which is above the Map transitions sub-panel, we can see the statistics about the properties causing map transitions and types of map events.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/map-panel.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Map panel overview&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/stats-panel.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Stats panel overview&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ic-panel&quot;&gt;IC Panel &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#ic-panel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The IC panel displays statistics about IC events falling within a specific time range which are filtered through the Timeline panel. Additionally, the IC panel allows grouping IC events based on various options (type, category, map, file position.). From the grouping options, map and file position grouping option interacts with map and source code panels respectively to display the transition trees of maps and highlight the file positions associated with the IC events.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/ic-panel.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;IC panel Overview&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/ic-panel2.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;IC panel overview (Cont.)&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/ic-panel3.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;IC panel Overview (Cont.)&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/ic-panel4.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;IC panel overview (Cont.)&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&quot;source-panel&quot;&gt;Source Panel &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#source-panel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Source panel displays the loaded scripts with clickable markers to emit custom events which selects both Map and IC log events across the custom panels. Selection of a loaded script can be done from the drill down bar. Selecting a file position from Map panel and IC panel highlights the selected file position on the source code panel.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/system-analyzer/source-panel.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Source panel Overview&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&quot;acknowledgements&quot;&gt;Acknowledgements &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/system-analyzer/#acknowledgements&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I would like to thank everyone in the V8 and Web on Android teams, especially to my host Sathya and co-host Camillo for supporting me throughout my internship and giving me the opportunity to work on such a cool project.&lt;/p&gt;
&lt;p&gt;I had an amazing summer interning at Google!&lt;/p&gt;
</content></entry><entry><title>Slack tracking in V8</title><link href="https://v8.js.cn/blog/slack-tracking/"/><updated>2020-09-24T14:00:00Z</updated><id>https://v8.js.cn/blog/slack-tracking/</id><author><name>Michael Stanton (@alpencoder), renowned master of slack</name></author><content type="html">&lt;p&gt;Slack tracking is a way to give new objects an initial size that is &lt;strong&gt;larger than what they may actually use&lt;/strong&gt;, so they can have new properties added quickly. And then, after some period of time, to &lt;strong&gt;magically return that unused space to the system&lt;/strong&gt;. Neat, huh?&lt;/p&gt;
&lt;p&gt;It’s especially useful because JavaScript doesn’t have static classes. The system can never see “at a glance” how many properties you have. The engine experiences them one by one. So when you read:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Matterhorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4478&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might think the engine has all it needs to perform well — you’ve told it the object has two properties, after all. However, V8 really has no idea what will come next. This object &lt;code&gt;m1&lt;/code&gt; could be passed to another function that adds 10 more properties to it. Slack tracking comes out of this need to be responsive to whatever comes next in an environment without static compilation to infer overall structure. It’s like many other mechanisms in V8, whose basis is only things you can generally say about execution, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most objects die soon, few live long — the garbage collection “generational hypothesis”.&lt;/li&gt;
&lt;li&gt;The program does indeed have an organizational structure — we build &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;shapes or “hidden classes”&lt;/a&gt; (we call these &lt;strong&gt;maps&lt;/strong&gt; in V8) into the objects we see the programmer uses because we believe they will be useful. &lt;em&gt;BTW, &lt;a href=&quot;https://v8.js.cn/blog/fast-properties&quot;&gt;Fast Properties in V8&lt;/a&gt; is a great post with interesting details about maps and property access.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Programs have an initialization state, when everything is new and it’s hard to tell what’s important. Later, the important classes and functions can be identified through their steady use — our feedback regime and compiler pipeline grow out of this idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, and most importantly, the runtime environment must be very fast, otherwise we’re just philosophizing.&lt;/p&gt;
&lt;p&gt;Now, V8 could simply store properties in a backing store attached to the main object. Unlike properties that live directly in the object, this backing store can grow indefinitely through copying and replacing the pointer. However the fastest access to a property comes by avoiding that indirection and looking at a fixed offset from the start of the object. Below, I show the layout of a plain ol’ JavaScript object in the V8 heap with two in-object properties. The first three words are standard in every object (a pointer to the map, to the properties backing store, and to the elements backing store). You can see that the object can’t “grow” because it’s hard up against the next object in the heap:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/property-layout.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;230&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I left out the details of the property backing store because the only thing important about it for the moment is that it can be replaced at any time with a larger one. However, it too is an object on the V8 heap and has a map pointer like all objects that reside there.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So anyway, because of the performance provided by in-object properties, V8 is willing to give you extra space in each object, and &lt;strong&gt;slack tracking&lt;/strong&gt; is the way it’s done. Eventually, you’ll settle down, stop adding new properties, and get down to the business of mining bitcoin or whatever.&lt;/p&gt;
&lt;p&gt;How much “time” does V8 give you? Cleverly, it considers the number of times you’ve constructed a particular object. In fact, there is a counter in the map, and it’s initialized with one of the more mystical magic numbers in the system: &lt;strong&gt;seven&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Another question: how does V8 know how much extra space in the object body to provide? It actually gets a hint from the compilation process, which offers an estimated number of properties to start with. This calculation includes the number of properties from the prototype object, going up the chain of prototypes recursively. Finally, for good measure it adds &lt;strong&gt;eight&lt;/strong&gt; more (another magic number!). You can see this in &lt;code&gt;JSFunction::CalculateExpectedNofProperties()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JSFunction&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CalculateExpectedNofProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Isolate&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; isolate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                               Handle&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;JSFunction&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PrototypeIterator &lt;span class=&quot;token function&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isolate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; function&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; kStartAtReceiver&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;iter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsAtEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; iter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Advance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    Handle&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;JSReceiver&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;        PrototypeIterator&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;GetCurrent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;JSReceiver&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;current&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsJSFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    Handle&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;JSFunction&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; func &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;JSFunction&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The super constructor should be compiled for the number of expected&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// properties to be available.&lt;/span&gt;&lt;br /&gt;    Handle&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SharedFunctionInfo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isolate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    IsCompiledScope &lt;span class=&quot;token function&quot;&gt;is_compiled_scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shared&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is_compiled_scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isolate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;is_compiled_scope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is_compiled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Compiler&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;CLEAR_EXCEPTION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                          &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;is_compiled_scope&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;DCHECK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shared&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is_compiled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; shared&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expected_nof_properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// Check that the estimate is sensible.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; JSObject&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;kMaxInObjectProperties &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JSObject&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;kMaxInObjectProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// In case there was a compilation error proceed iterating in case there&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// will be a builtin function in the prototype chain that requires&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// certain number of in-object properties.&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// In-object slack tracking will reclaim redundant inobject space&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// later, so we can afford to adjust the estimate generously,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// meaning we over-allocate by at least 8 slots in the beginning.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; JSObject&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;kMaxInObjectProperties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      expected_nof_properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; JSObject&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;kMaxInObjectProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; expected_nof_properties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s have a look at our object &lt;code&gt;m1&lt;/code&gt; from before:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Matterhorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4478&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the calculation in &lt;code&gt;JSFunction::CalculateExpectedNofProperties&lt;/code&gt; and our &lt;code&gt;Peak()&lt;/code&gt; function, we should have 2 in-object properties, and thanks to slack tracking, another 8 extra. We can print &lt;code&gt;m1&lt;/code&gt; with &lt;code&gt;%DebugPrint()&lt;/code&gt; (&lt;em&gt;this handy function exposes the map structure. You can use it by running &lt;code&gt;d8&lt;/code&gt; with the flag &lt;code&gt;--allow-natives-syntax&lt;/code&gt;&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; %DebugPrint(m1);
DebugPrint: 0x49fc866d: [JS_OBJECT_TYPE]
 - map: 0x58647385 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x49fc85e9 &amp;lt;Object map = 0x58647335&amp;gt;
 - elements: 0x28c821a1 &amp;lt;FixedArray[0]&amp;gt; [HOLEY_ELEMENTS]
 - properties: 0x28c821a1 &amp;lt;FixedArray[0]&amp;gt; {
    0x28c846f9: [String] in ReadOnlySpace: #name: 0x5e412439 &amp;lt;String[10]: #Matterhorn&amp;gt; (const data field 0)
    0x5e412415: [String] in OldSpace: #height: 4478 (const data field 1)
 }
  0x58647385: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 52
 - inobject properties: 10
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 8
 - enum length: invalid
 - stable_map
 - back pointer: 0x5864735d &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt;
 - prototype_validity cell: 0x5e4126fd &amp;lt;Cell value= 0&amp;gt;
 - instance descriptors (own) #2: 0x49fc8701 &amp;lt;DescriptorArray[2]&amp;gt;
 - prototype: 0x49fc85e9 &amp;lt;Object map = 0x58647335&amp;gt;
 - constructor: 0x5e4125ed &amp;lt;JSFunction Peak (sfi = 0x5e4124dd)&amp;gt;
 - dependent code: 0x28c8212d &amp;lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&amp;gt;
 - construction counter: 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the instance size of the object is 52. Object layout in V8 is like so:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;word&lt;/th&gt;
&lt;th&gt;what&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;the map&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;pointer to the properties array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;pointer to the elements array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;in-object field 1 (pointer to string &lt;code&gt;&amp;quot;Matterhorn&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;in-object field 2 (integer value &lt;code&gt;4478&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;unused in-object field 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;unused in-object field 10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Pointer size is 4 in this 32-bit binary, so we’ve got those 3 initial words that every ordinary JavaScript object has, and then 10 extra words in the object. It tells us above, helpfully, that there are 8 “unused property fields”. So, we are experiencing slack tracking. Our objects are bloated, greedy consumers of precious bytes!&lt;/p&gt;
&lt;p&gt;How do we slim down? We use the construction counter field in the map. We reach zero and then decide we are done with slack tracking. However, if you construct more objects, you won’t see the counter above decreasing. Why?&lt;/p&gt;
&lt;p&gt;Well, it’s because the map displayed above is not “the” map for a &lt;code&gt;Peak&lt;/code&gt; object. It’s only a leaf map in a chain of maps descending from the &lt;strong&gt;initial map&lt;/strong&gt; that the &lt;code&gt;Peak&lt;/code&gt; object is given before executing the constructor code.&lt;/p&gt;
&lt;p&gt;How to find the initial map? Happily, the function &lt;code&gt;Peak()&lt;/code&gt; has a pointer to it. It’s the construction counter in the initial map that we use to control slack tracking:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; %DebugPrint(Peak);
d8&amp;gt; %DebugPrint(Peak)
DebugPrint: 0x31c12561: [Function] in OldSpace
 - map: 0x2a2821f5 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x31c034b5 &amp;lt;JSFunction (sfi = 0x36108421)&amp;gt;
 - elements: 0x28c821a1 &amp;lt;FixedArray[0]&amp;gt; [HOLEY_ELEMENTS]
 - function prototype: 0x37449c89 &amp;lt;Object map = 0x2a287335&amp;gt;
 - initial_map: 0x46f07295 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt;   // Here&#39;s the initial map.
 - shared_info: 0x31c12495 &amp;lt;SharedFunctionInfo Peak&amp;gt;
 - name: 0x31c12405 &amp;lt;String[4]: #Peak&amp;gt;
…

d8&amp;gt; // %DebugPrintPtr allows you to print the initial map.
d8&amp;gt; %DebugPrintPtr(0x46f07295)
DebugPrint: 0x46f07295: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 52
 - inobject properties: 10
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 10
 - enum length: invalid
 - back pointer: 0x28c02329 &amp;lt;undefined&amp;gt;
 - prototype_validity cell: 0x47f0232d &amp;lt;Cell value= 1&amp;gt;
 - instance descriptors (own) #0: 0x28c02135 &amp;lt;DescriptorArray[0]&amp;gt;
 - transitions #1: 0x46f0735d &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt;
     0x28c046f9: [String] in ReadOnlySpace: #name:
         (transition to (const data field, attrs: [WEC]) @ Any) -&amp;gt;
             0x46f0735d &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt;
 - prototype: 0x5cc09c7d &amp;lt;Object map = 0x46f07335&amp;gt;
 - constructor: 0x21e92561 &amp;lt;JSFunction Peak (sfi = 0x21e92495)&amp;gt;
 - dependent code: 0x28c0212d &amp;lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&amp;gt;
 - construction counter: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how the construction counter is decremented to 5? If you’d like to find the initial map from the two-property map we showed above, you can follow its back pointer with the help of &lt;code&gt;%DebugPrintPtr()&lt;/code&gt; until you reach a map with &lt;code&gt;undefined&lt;/code&gt; in the back pointer slot. That will be this map above.&lt;/p&gt;
&lt;p&gt;Now, a map tree grows from the initial map, with a branch for each property added from that point. We call these branches &lt;em&gt;transitions&lt;/em&gt;. In the above printout of the initial map, do you see the transition to the next map with the label “name”? The whole map tree thus far looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/root-map-1.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;340&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;(X, Y, Z) means (instance size, number of in-object properties, number of unused properties).&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;These transitions based on property names are how the &lt;a href=&quot;https://www.google.com/search?q=blind+mole&amp;amp;tbm=isch&quot;&gt;“blind mole”&lt;/a&gt;&amp;quot; of JavaScript builds its maps behind you. This initial map is also stored in the function &lt;code&gt;Peak&lt;/code&gt;, so when it’s used as a constructor, that map can be used to set up the &lt;code&gt;this&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Matterhorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4478&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mont Blanc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4810&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Zinalrothorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4221&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Wendelstein&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1838&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Zugspitze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2962&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m6 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Watzmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2713&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m7 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Eiger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3970&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cool thing here is that after creating &lt;code&gt;m7&lt;/code&gt;, running &lt;code&gt;%DebugPrint(m1)&lt;/code&gt; again produces a marvellous new result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DebugPrint: 0x5cd08751: [JS_OBJECT_TYPE]
 - map: 0x4b387385 &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt; [FastProperties]
 - prototype: 0x5cd086cd &amp;lt;Object map = 0x4b387335&amp;gt;
 - elements: 0x586421a1 &amp;lt;FixedArray[0]&amp;gt; [HOLEY_ELEMENTS]
 - properties: 0x586421a1 &amp;lt;FixedArray[0]&amp;gt; {
    0x586446f9: [String] in ReadOnlySpace: #name:
        0x51112439 &amp;lt;String[10]: #Matterhorn&amp;gt; (const data field 0)
    0x51112415: [String] in OldSpace: #height:
        4478 (const data field 1)
 }
0x4b387385: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 20
 - inobject properties: 2
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - back pointer: 0x4b38735d &amp;lt;Map(HOLEY_ELEMENTS)&amp;gt;
 - prototype_validity cell: 0x511128dd &amp;lt;Cell value= 0&amp;gt;
 - instance descriptors (own) #2: 0x5cd087e5 &amp;lt;DescriptorArray[2]&amp;gt;
 - prototype: 0x5cd086cd &amp;lt;Object map = 0x4b387335&amp;gt;
 - constructor: 0x511127cd &amp;lt;JSFunction Peak (sfi = 0x511125f5)&amp;gt;
 - dependent code: 0x5864212d &amp;lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&amp;gt;
 - construction counter: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our instance size is now 20, which is 5 words:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;word&lt;/th&gt;
&lt;th&gt;what&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;the map&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;pointer to the properties array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;pointer to the elements array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;height&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You’ll wonder how this happened. After all, if this object is laid out in memory, and used to have 10 properties, how can the system tolerate these 8 words laying around with no one to own them? It’s true that we never filled them with anything interesting — maybe that can help us.&lt;/p&gt;
&lt;p&gt;If you wonder why I’m worried about leaving these words laying around, there is some background you need to know about the garbage collector. Objects are laid out one after the other, and the V8 garbage collector keeps track of things in that memory by walking over it again and again. Starting at the first word in memory, it expects to find a pointer to a map. It reads the instance size from the map and then knows how far to step forward to the next valid object. For some classes it has to additionally compute a length, but that’s all there is to it.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/gc-heap-1.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;80&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;In the diagram above, the red boxes are the &lt;strong&gt;maps&lt;/strong&gt;, and the white boxes the words that fill out the instance size of the object. The garbage collector can “walk” the heap by hopping from map to map.&lt;/p&gt;
&lt;p&gt;So what happens if the map suddenly changes it’s instance size? Now when the GC (garbage collector) walks the heap it will find itself looking at a word that it didn’t see before. In the case of our &lt;code&gt;Peak&lt;/code&gt; class, we change from taking up 13 words to only 5 (I colored the “unused property” words yellow):&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/gc-heap-2.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;60&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/gc-heap-3.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;60&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;We can deal with this if we cleverly initialize those unused properties with a &lt;strong&gt;“filler” map of instance size 4&lt;/strong&gt;. This way, the GC will lightly walk over them once they are exposed to the traversal.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/gc-heap-4.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;60&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;This is expressed in the code in &lt;code&gt;Factory::InitializeJSObjectBody()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;InitializeJSObjectBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Handle&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;JSObject&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Handle&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Map&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                     &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; start_offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;lines removed&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; in_progress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsInobjectSlackTrackingInProgress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  Object filler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in_progress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    filler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;one_pointer_filler_map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    filler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;undefined_value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  obj&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;InitializeBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start_offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;undefined_value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in_progress&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    map&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FindRootMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isolate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;InobjectSlackTrackingStep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isolate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;lines removed&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And so this is slack tracking in action. For each class you create, you can expect it to take up more memory for a while, but on the 7th instantiation we “call it good” and expose the leftover space for the GC to see. These one-word objects have no owners — that is, nobody points to them — so when a collection occurs they are freed up and living objects may be compacted to save space.&lt;/p&gt;
&lt;p&gt;The diagram below reflects that slack tracking is &lt;strong&gt;finished&lt;/strong&gt; for this initial map. Note that the instance size is now 20 (5 words: the map, the properties and elements arrays, and 2 more slots). Slack tracking respects the whole chain from the initial map. That is, if a descendent of the initial map ends up using all 10 of those initial extra properties, then the initial map keeps them, marking them as unused:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/root-map-2.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;340&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;(X, Y, Z) means (instance size, number of in-object properties, number of unused properties).&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Now that slack tracking is finished, what happens if we add another property to one of these &lt;code&gt;Peak&lt;/code&gt; objects?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;m1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;country &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Switzerland&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;V8 has to go into the properties backing store. We end up with the following object layout:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;word&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;pointer to a properties backing store&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;pointer to elements (empty array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;pointer to string &lt;code&gt;&amp;quot;Matterhorn&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4478&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The properties backing store then looks like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;word&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;length (3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;pointer to string &lt;code&gt;&amp;quot;Switzerland&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We have those extra &lt;code&gt;undefined&lt;/code&gt; values there in case you decide to add more properties. We kind of think you might, based on your behavior so far!&lt;/p&gt;
&lt;h2 id=&quot;optional-properties&quot;&gt;Optional properties &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/slack-tracking/#optional-properties&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It may happen that you add properties in some cases only. Suppose if height is 4000 meters or more, you want to keep track of two additional properties, &lt;code&gt;prominence&lt;/code&gt; and &lt;code&gt;isClimbed&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prominence&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isClimbed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;height &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prominence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prominence&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isClimbed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; isClimbed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You add a few of these different variants:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Wendelstein&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1838&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Matterhorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4478&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1040&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Zugspitze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2962&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mont Blanc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4810&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4695&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Watzmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2713&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m6 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Zinalrothorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4221&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;490&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m7 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Eiger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3970&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, objects &lt;code&gt;m1&lt;/code&gt;, &lt;code&gt;m3&lt;/code&gt;, &lt;code&gt;m5&lt;/code&gt;, and &lt;code&gt;m7&lt;/code&gt; have one map, and objects &lt;code&gt;m2&lt;/code&gt;, &lt;code&gt;m4&lt;/code&gt;, and &lt;code&gt;m6&lt;/code&gt; have a map further down the chain of descendents from the initial map because of the additional properties. When slack tracking is finished for this map family, there are &lt;strong&gt;4&lt;/strong&gt; in-object properties instead of &lt;strong&gt;2&lt;/strong&gt; like before, because slack tracking makes sure to keep sufficient room for the maximum number of in-object properties used by any descendents in the tree of maps below the initial map.&lt;/p&gt;
&lt;p&gt;Below shows the map family after running the code above, and of course, slack tracking is complete:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/slack-tracking/root-map-3.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;600&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;(X, Y, Z) means (instance size, number of in-object properties, number of unused properties).&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;how-about-optimized-code%3F&quot;&gt;How about optimized code? &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/slack-tracking/#how-about-optimized-code%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s compile some optimized code before slack tracking is finished. We’ll use a couple native syntax commands to force a optimized compile to happen before we finished slack tracking:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Peak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a4&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PrepareFunctionForOptimization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Wendelstein&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1838&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; m2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Matterhorn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4478&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1040&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OptimizeFunctionOnNextCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Zugspitze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2962&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be enough to compile and run optimized code. We do something in TurboFan (the optimizing compiler) called &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/js-create-lowering.h;l=32;drc=ee9e7e404e5a3f75a3ca0489aaf80490f625ca27&quot;&gt;&lt;strong&gt;Create Lowering&lt;/strong&gt;&lt;/a&gt;, where we inline the allocation of objects. That means the native code we produce emits instructions to ask the GC for the instance size of the object to allocate and then carefully initialize those fields. However, this code would be invalid if slack tracking were to stop at some later point. What can we do about that?&lt;/p&gt;
&lt;p&gt;Easy-peasy! We just end slack tracking early for this map family. This makes sense because normally — we wouldn’t compile an optimized function until thousands of objects have been created. So slack tracking &lt;em&gt;should&lt;/em&gt; be finished. If it’s not, too bad! The object must not be that important anyway if fewer than 7 of them have been created by this point. (Normally, remember, we are only optimizing after the program ran for a long time.)&lt;/p&gt;
&lt;h3 id=&quot;compiling-on-a-background-thread&quot;&gt;Compiling on a background thread &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/slack-tracking/#compiling-on-a-background-thread&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can compile optimized code on the main thread, in which case we can get away with prematurely ending slack tracking with some calls to change the initial map because the world has been stopped. However, we do as much compilation as possible on a background thread. From this thread it would be dangerous to touch the initial map because it &lt;em&gt;might be changing on the main thread where JavaScript is running.&lt;/em&gt; So our technique goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Guess&lt;/strong&gt; that the instance size will be what it would be if you did stop slack tracking right now. Remember this size.&lt;/li&gt;
&lt;li&gt;When the compilation is almost done, we return to the main thread where we can safely force completion of slack tracking if it wasn’t already done.&lt;/li&gt;
&lt;li&gt;Check: is the instance size what we predicted? If so, &lt;strong&gt;we are good!&lt;/strong&gt; If not, throw away the code object and try again later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you’d like to see this in code, have a look at the class &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/compilation-dependencies.cc?q=InitialMapInstanceSizePredictionDependency&amp;amp;ss=chromium%2Fchromium%2Fsrc&quot;&gt;&lt;code&gt;InitialMapInstanceSizePredictionDependency&lt;/code&gt;&lt;/a&gt; and how it’s used in &lt;code&gt;js-create-lowering.cc&lt;/code&gt; to create inline allocations. You’ll see that the &lt;code&gt;PrepareInstall()&lt;/code&gt; method is called on the main thread, which forces completion of slack tracking. Then method &lt;code&gt;Install()&lt;/code&gt; checks if our guess on the instance size held up.&lt;/p&gt;
&lt;p&gt;Here is the optimized code with the inlined allocation. First you see communication with the GC, checking to see if we can just bump a pointer forward by the instance size and take that (this is called bump-pointer allocation). Then, we start filling in fields of the new object:&lt;/p&gt;
&lt;pre class=&quot;language-asm&quot;&gt;&lt;code class=&quot;language-asm&quot;&gt;…&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x5dfa4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt;  lea &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1c&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;&lt;br /&gt;4c  cmp &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x5dfa8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;;; hey GC, can we have 28 (0x1c) bytes please?&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;52&lt;/span&gt;  jna &lt;span class=&quot;token number&quot;&gt;0x36ec4a5a&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x11a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;58&lt;/span&gt;  lea &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1c&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;&lt;br /&gt;5b  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x5dfa4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;;; okay GC, we took it. KThxbye.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;  add &lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;                 &lt;span class=&quot;token comment&quot;&gt;;; hells yes. ecx is my new object.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x46647295&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x46647295 &amp;lt;Map(HOLEY_ELEMENTS)&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; Store the INITIAL MAP.&lt;/span&gt;&lt;br /&gt;6c  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x56f821a1&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x56f821a1 &amp;lt;FixedArray[0]&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;71&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; Store the PROPERTIES backing store (empty)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;74&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x7&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; Store the ELEMENTS backing store (empty)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;77&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x56f82329&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x56f82329 &amp;lt;undefined&gt;&lt;/span&gt;&lt;br /&gt;7c  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xb&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; in-object property 1 &amp;lt;-- undefined&lt;/span&gt;&lt;br /&gt;7f  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xf&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; in-object property 2 &amp;lt;-- undefined&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;82&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x13&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; in-object property 3 &amp;lt;-- undefined&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;85&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; in-object property 4 &amp;lt;-- undefined&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;88&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; retrieve argument {a1}&lt;/span&gt;&lt;br /&gt;8b  test_w &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;  jz &lt;span class=&quot;token number&quot;&gt;0x36ec4a6d&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x12d&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;96&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;eax&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x4664735d&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x4664735d &amp;lt;Map(HOLEY_ELEMENTS)&gt;&lt;/span&gt;&lt;br /&gt;9b  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;eax&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; push the map forward&lt;/span&gt;&lt;br /&gt;9e  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xb&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; name = {a1}&lt;/span&gt;&lt;br /&gt;a1  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;eax&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; retrieve argument {a2}&lt;/span&gt;&lt;br /&gt;a4  test &lt;span class=&quot;token register variable&quot;&gt;al&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;br /&gt;a6  jnz &lt;span class=&quot;token number&quot;&gt;0x36ec4a77&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x137&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;ac  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edx&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x46647385&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x46647385 &amp;lt;Map(HOLEY_ELEMENTS)&gt;&lt;/span&gt;&lt;br /&gt;b1  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edx&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; push the map forward&lt;/span&gt;&lt;br /&gt;b4  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xf&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;eax&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; height = {a2}&lt;/span&gt;&lt;br /&gt;b7  cmp &lt;span class=&quot;token register variable&quot;&gt;eax&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1f40&lt;/span&gt;              &lt;span class=&quot;token comment&quot;&gt;;; is height &gt;= 4000?&lt;/span&gt;&lt;br /&gt;bc  jng &lt;span class=&quot;token number&quot;&gt;0x36ec4a32&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xf2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; B8 start &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; B9 start &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;br /&gt;c2  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edx&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; retrieve argument {a3}&lt;/span&gt;&lt;br /&gt;c5  test_b &lt;span class=&quot;token register variable&quot;&gt;dl&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;br /&gt;c8  jnz &lt;span class=&quot;token number&quot;&gt;0x36ec4a81&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x141&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;ce  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;esi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x466473ad&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x466473ad &amp;lt;Map(HOLEY_ELEMENTS)&gt;&lt;/span&gt;&lt;br /&gt;d3  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;esi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; push the map forward&lt;/span&gt;&lt;br /&gt;d6  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x13&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edx&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; prominence = {a3}&lt;/span&gt;&lt;br /&gt;d9  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;esi&lt;/span&gt;,&lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; retrieve argument {a4}&lt;/span&gt;&lt;br /&gt;dc  test_w &lt;span class=&quot;token register variable&quot;&gt;esi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;br /&gt;e1  jz &lt;span class=&quot;token number&quot;&gt;0x36ec4a8b&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x14b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;e7  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;,&lt;span class=&quot;token number&quot;&gt;0x466473d5&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; object: 0x466473d5 &amp;lt;Map(HOLEY_ELEMENTS)&gt;&lt;/span&gt;&lt;br /&gt;ec  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;edi&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;;; push the map forward to the leaf map&lt;/span&gt;&lt;br /&gt;ef  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;esi&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;;; isClimbed = {a4}&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; B10 start (deconstruct frame) &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;br /&gt;f2  &lt;span class=&quot;token keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;token register variable&quot;&gt;eax&lt;/span&gt;,&lt;span class=&quot;token register variable&quot;&gt;ecx&lt;/span&gt;                 &lt;span class=&quot;token comment&quot;&gt;;; get ready to return this great Peak object!&lt;/span&gt;&lt;br /&gt;…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BTW, to see all this you should have a debug build and pass a few flags. I put the code into a file and called:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;./d8 --allow-natives-syntax --trace-opt --code-comments --print-opt-code mycode.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope this has been a fun exploration. I’d like to say a very special thanks to Igor Sheludko and Maya Armyanova for (patiently!) reviewing this post.&lt;/p&gt;
</content></entry><entry><title>V8 release v8.6</title><link href="https://v8.js.cn/blog/v8-release-86/"/><updated>2020-09-21T00:00:00Z</updated><id>https://v8.js.cn/blog/v8-release-86/</id><author><name>Ingvar Stepanyan (@RReverser), a keyboard fuzzer</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/8.6&quot;&gt;V8 version 8.6&lt;/a&gt;, which is in beta until its release in coordination with Chrome 86 Stable in several weeks. V8 v8.6 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;respectful-code&quot;&gt;Respectful code &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#respectful-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The v8.6 version makes the V8 code base &lt;a href=&quot;https://v8.dev/docs/respectful-code&quot;&gt;more respectful&lt;/a&gt;. The team joined a Chromium-wide effort to follow Google’s commitments to racial equity by replacing some insensitive terms in the project. This is still an ongoing effort and any external contributor is welcome to give a hand! You can see the list of still available tasks &lt;a href=&quot;https://docs.google.com/document/d/1rK7NQK64c53-qbEG-N5xz7uY_QUVI45sUxinbyikCYM/edit&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;open-sourced-js-fuzzer&quot;&gt;Open sourced JS-Fuzzer &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#open-sourced-js-fuzzer&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JS-Fuzzer is a mutation-based JavaScript fuzzer originally authored by Oliver Chang. It has been a cornerstone of V8&#39;s &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list?q=ochang_js_fuzzer%20label%3AStability-Crash%20label%3AClusterfuzz%20-status%3AWontFix%20-status%3ADuplicate&amp;amp;can=1&quot;&gt;stability&lt;/a&gt; and &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list?q=ochang_js_fuzzer%20label%3ASecurity%20label%3AClusterfuzz%20-status%3AWontFix%20-status%3ADuplicate&amp;amp;can=1&quot;&gt;security&lt;/a&gt; in the past and is now &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/2320330&quot;&gt;open source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The fuzzer mutates existing cross-engine test cases using &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; AST transformations configured by extensible &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/320d98709f/tools/clusterfuzz/js_fuzzer/mutators/&quot;&gt;mutator classes&lt;/a&gt;. We recently also started running an instance of the fuzzer in differential-testing mode for detecting JavaScript &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list?q=blocking%3A1050674%20-status%3ADuplicate&amp;amp;can=1&quot;&gt;correctness issues&lt;/a&gt;. Contributions are welcome! See the &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/master/tools/clusterfuzz/js_fuzzer/README.md&quot;&gt;README&lt;/a&gt; for more.&lt;/p&gt;
&lt;h3 id=&quot;speed-ups-in-number.prototype.tostring&quot;&gt;Speed-ups in &lt;code&gt;Number.prototype.toString&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#speed-ups-in-number.prototype.tostring&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Converting a JavaScript number to a string can be a surprisingly complex operation in the general case; we have to take into account floating point precision, scientific notation, NaNs, infinities, rounding, and so on. We don’t even know how big the resulting string will be before calculating it. Because of this, our implementation of &lt;code&gt;Number.prototype.toString&lt;/code&gt; would bail out to a C++ runtime function.&lt;/p&gt;
&lt;p&gt;But, a lot of the time, you just want to print a simple, small integer (a “Smi”). This is a much simpler operation, and the overheads of calling a C++ runtime function are no longer worth it. So we’ve worked with our friends at Microsoft to add a simple fast path for small integers to &lt;code&gt;Number.prototype.toString&lt;/code&gt;, written in Torque, to reduce these overheads for this common case. This improved number printing microbenchmarks by ~75%.&lt;/p&gt;
&lt;h3 id=&quot;atomics.wake-removed&quot;&gt;&lt;code&gt;Atomics.wake&lt;/code&gt; removed &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#atomics.wake-removed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Atomics.wake&lt;/code&gt; was renamed to &lt;code&gt;Atomics.notify&lt;/code&gt; to match a spec change &lt;a href=&quot;https://v8.dev/blog/v8-release-73#atomics.notify&quot;&gt;in v7.3&lt;/a&gt;. The deprecated &lt;code&gt;Atomics.wake&lt;/code&gt; alias is now removed.&lt;/p&gt;
&lt;h3 id=&quot;small-normative-changes&quot;&gt;Small normative changes &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#small-normative-changes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Anonymous classes now have a &lt;code&gt;.name&lt;/code&gt; property whose value is the empty string &lt;code&gt;&#39;&#39;&lt;/code&gt;. &lt;a href=&quot;https://github.com/tc39/ecma262/pull/1490&quot;&gt;Spec change&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\8&lt;/code&gt; and &lt;code&gt;\9&lt;/code&gt; escape sequences are now illegal in template string literals in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode&quot;&gt;sloppy mode&lt;/a&gt; and in all string literals in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;strict mode&lt;/a&gt;. &lt;a href=&quot;https://github.com/tc39/ecma262/pull/2054&quot;&gt;Spec change&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The built-in &lt;code&gt;Reflect&lt;/code&gt; object now has a &lt;code&gt;Symbol.toStringTag&lt;/code&gt; property whose value is &lt;code&gt;&#39;Reflect&#39;&lt;/code&gt;. &lt;a href=&quot;https://github.com/tc39/ecma262/pull/2057&quot;&gt;Spec change&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webassembly&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#webassembly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;simd-on-liftoff&quot;&gt;SIMD on Liftoff &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#simd-on-liftoff&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Liftoff is the baseline compiler for WebAssembly, and as of V8 v8.5 is shipped on all platforms. The &lt;a href=&quot;https://v8.dev/features/simd&quot;&gt;SIMD proposal&lt;/a&gt; enables WebAssembly to take advantage of commonly available hardware vector instructions to accelerate compute-intensive workloads. It is currently in an &lt;a href=&quot;https://v8.dev/blog/v8-release-84#simd-origin-trial&quot;&gt;Origin Trial&lt;/a&gt;, which allows developers to experiment with a feature before it is standardized.&lt;/p&gt;
&lt;p&gt;Up until now, SIMD was implemented only in TurboFan, V8&#39;s top tier compiler. This is necessary to get maximum performance out of the SIMD instructions. WebAssembly modules that use SIMD instructions will have faster startup, and often faster runtime performance than their scalar equivalents compiled with TurboFan. For example, given a function that takes an array of floats and clamps its values to zero (written here in JavaScript for clarity):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clampZero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;f32array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; f32array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f32array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      f32array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s compare two different implementations of this function, using Liftoff and TurboFan:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A scalar implementation, with the loop unrolled 4 times.&lt;/li&gt;
&lt;li&gt;A SIMD implementation, using the &lt;code&gt;i32x4.max_s&lt;/code&gt; instruction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using the Liftoff scalar implementation as a baseline, we see the following results:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.js.cn/_img/v8-release-86/simd.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;A graph showing Liftoff SIMD being ~2.8× faster than Liftoff scalar vs. TurboFan SIMD being ~7.5× faster&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&quot;faster-wasm-to-js-calls&quot;&gt;Faster Wasm-to-JS calls &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#faster-wasm-to-js-calls&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If WebAssembly calls an imported JavaScript function, we call through a so-called “Wasm-to-JS wrapper” (or “import wrapper”). This wrapper &lt;a href=&quot;https://webassembly.github.io/spec/js-api/index.html#tojsvalue&quot;&gt;translates the arguments&lt;/a&gt; to objects that JavaScript understands, and when the call to JavaScript returns, it translates back the return value(s) &lt;a href=&quot;https://webassembly.github.io/spec/js-api/index.html#towebassemblyvalue&quot;&gt;to WebAssembly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to ensure that the JavaScript &lt;code&gt;arguments&lt;/code&gt; object reflects exactly the arguments that were passed from WebAssembly, we call through a so-called “arguments adapter trampoline” if a mismatch in the number of arguments is detected.&lt;/p&gt;
&lt;p&gt;In many cases though, this is not needed, because the called function does not use the &lt;code&gt;arguments&lt;/code&gt; object. In v8.6, we landed a &lt;a href=&quot;https://crrev.com/c/2317061&quot;&gt;patch&lt;/a&gt; by our Microsoft contributors that avoids the call through the arguments adapter in those cases, which makes affected calls significantly faster.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;detect-pending-background-tasks-with-isolate%3A%3Ahaspendingbackgroundtasks&quot;&gt;Detect pending background tasks with &lt;code&gt;Isolate::HasPendingBackgroundTasks&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/blog/v8-release-86/#detect-pending-background-tasks-with-isolate%3A%3Ahaspendingbackgroundtasks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The new API function &lt;code&gt;Isolate::HasPendingBackgroundTasks&lt;/code&gt; allows embedders to check if there is pending background work that will eventually post new foreground tasks, like WebAssembly compilation.&lt;/p&gt;
&lt;p&gt;This API should solve the problem where an embedder shuts down V8 even though there is still pending WebAssembly compilation that will eventually kick off further script execution. With &lt;code&gt;Isolate::HasPendingBackgroundTasks&lt;/code&gt; the embedder can wait for new foreground tasks instead of shutting down V8.&lt;/p&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/8.5..branch-heads/8.6 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 8.6 -t branch-heads/8.6&lt;/code&gt; to experiment with the new features in V8 v8.6. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry></feed>