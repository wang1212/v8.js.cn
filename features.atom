<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>V8 JavaScript and WebAssembly language features</title><subtitle>JavaScript V8 引擎</subtitle><link href="https://v8.js.cn/features.atom" rel="self"/><link href="https://v8.js.cn/features"/><updated>2021-03-30T00:00:00Z</updated><id>https://v8.js.cn/features</id><author><name>Mathias Bynens</name></author><entry><title>Class static initializer blocks</title><link href="https://v8.js.cn/features/class-static-initializer-blocks"/><updated>2021-03-30T00:00:00Z</updated><id>https://v8.js.cn/features/class-static-initializer-blocks</id><author><name>Shu-yu Guo (@_shu)</name></author><content type="html">&lt;p&gt;The new class static initializer block syntax lets developers gather code that should run once for a given class definition and put them in a single place. Consider the following example where a pseudo-random number generator uses a static block to initialize an entropy pool once, when the &lt;code&gt;class MyPRNG&lt;/code&gt; definition is evaluated.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyPRNG&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;seed &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyPRNG&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entropyPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Entropy pool exhausted&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      seed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MyPRNG&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entropyPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; seed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;getRandom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; … &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; entropyPool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entropyPool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;probeEntropySource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;scope&quot;&gt;Scope &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#scope&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each static initializer block is its own &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; scope. Like in static field initializers, the &lt;code&gt;this&lt;/code&gt; value in static blocks is the class constructor itself. Similarly, &lt;code&gt;super.property&lt;/code&gt; inside a static block refers to the super class’s static property.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;outer y&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; fieldA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;A.fieldA&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; fieldB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;B.fieldB&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fieldA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// → &#39;A.fieldA&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fieldB&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// → &#39;B.fieldB&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Since static blocks are their own `var` scope, `var`s do not hoist!&lt;/span&gt;&lt;br /&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;outer y&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;multiple-blocks&quot;&gt;Multiple blocks &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#multiple-blocks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A class may have more than one static initializer block. These blocks are evaluated in textual order. Additionally, if there are any static fields, all static elements are evaluated in textual order.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; field1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;field 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;static block 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; field2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;field 2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;static block 2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → field 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   static block 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   field 2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//   static block 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;access-to-private-fields&quot;&gt;Access to private fields &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#access-to-private-fields&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since a class static initializer block is always nested inside a class, it has access to that class’s private fields.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getDPrivateField&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  #privateField&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#privateField &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;getDPrivateField&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#privateField&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getDPrivateField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;private&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → private&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s about it. Happy object orienting!&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Class static initializer block support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/class-static-initializer-blocks#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=11375&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;91&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>WebAssembly integration with JavaScript BigInt</title><link href="https://v8.js.cn/features/wasm-bigint"/><updated>2020-11-12T00:00:00Z</updated><id>https://v8.js.cn/features/wasm-bigint</id><author><name>Alon Zakai</name></author><content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/WebAssembly/JS-BigInt-integration&quot;&gt;JS-BigInt-Integration&lt;/a&gt; feature makes it easy to pass 64-bit integers between JavaScript and WebAssembly. This post explains what that means and why it’s useful, which includes making things simpler for developers, letting code run more quickly, and also speeding up build times.&lt;/p&gt;
&lt;h2 id=&quot;64-bit-integers&quot;&gt;64-bit integers &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#64-bit-integers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript Numbers are doubles, that is, 64-bit floating-point values. Such a value can contain any 32-bit integer with full precision, but not all 64-bit ones. WebAssembly, on the other hand, has full support for 64-bit integers, the &lt;code&gt;i64&lt;/code&gt; type. A problem occurs when connecting the two: If a Wasm function returns an i64, for example, then the VM throws an exception if you call it from JavaScript, something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError: Wasm function signature contains illegal type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the error says, &lt;code&gt;i64&lt;/code&gt; is not a legal type for JavaScript.&lt;/p&gt;
&lt;p&gt;Historically, the best solution for this was “legalization” of the Wasm. Legalization means to convert Wasm imports and exports to use valid types for JavaScript. In practice, that did two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace a 64-bit integer parameter with two 32-bit ones, representing the low and high bits, respectively.&lt;/li&gt;
&lt;li&gt;Replace a 64-bit integer return value with a 32-bit one representing the low bits, and use a 32-bit value on the side for the high bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, consider this Wasm module:&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$send_i64&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    ..&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Legalization would turn that into this:&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$send_i64&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x_low&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x_high&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;;; the real value the rest of the code will use&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;;; code to combine $x_low and $x_high into $x&lt;/span&gt;&lt;br /&gt;    ..&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Legalization is done on the tools side, before it reaches the VM that runs it. For example, the &lt;a href=&quot;https://github.com/WebAssembly/binaryen&quot;&gt;Binaryen&lt;/a&gt; toolchain library has a pass called &lt;a href=&quot;https://github.com/WebAssembly/binaryen/blob/fd7e53fe0ae99bd27179cb35d537e4ce5ec1fe11/src/passes/LegalizeJSInterface.cpp&quot;&gt;LegalizeJSInterface&lt;/a&gt; that does that transformation, which is run automatically in &lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt; when it is needed.&lt;/p&gt;
&lt;h2 id=&quot;downsides-of-legalization&quot;&gt;Downsides of legalization &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#downsides-of-legalization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Legalization works well enough for many things, but it does have downsides, like the extra work to combine or split up 32-bit pieces into 64-bit values. While it’s rare that that happens on a hot path, when it does the slowdown can be noticeable - we’ll see some numbers later.&lt;/p&gt;
&lt;p&gt;Another annoyance is that legalization is noticeable by users, since it changes the interface between JavaScript and Wasm. Here is an example:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// example.c&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdint.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0xABCD12345678ULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// example.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;mergeInto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LibraryManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;library&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JS received: 0x&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a tiny C program that calls a &lt;a href=&quot;https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#implement-c-in-javascript&quot;&gt;JavaScript library&lt;/a&gt; function (that is, we define an extern C function in C, and implement it in JavaScript, as a simple and low-level way to call between Wasm and JavaScript). All this program does is send an &lt;code&gt;i64&lt;/code&gt; out to JavaScript, where we attempt to print it.&lt;/p&gt;
&lt;p&gt;We can build that with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emcc example.c --js-library example.js -o out.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we run it, we don’t get what we expect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node out.js
JS received: 0x12345678
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We sent &lt;code&gt;0xABCD12345678&lt;/code&gt; but we only received &lt;code&gt;0x12345678&lt;/code&gt; 😔. What happens here is that legalization turns that &lt;code&gt;i64&lt;/code&gt; into two &lt;code&gt;i32&lt;/code&gt;s, and our code just received the low 32 bits, and ignored another parameter that was sent. To handle things properly, we’d need to do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// The i64 is split into two 32-bit parameters, “low” and “high”.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;send_i64_to_js&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;low&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; high&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;JS received: 0x&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; high&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; low&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running this now, we get&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JS received: 0xabcd12345678
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, it’s possible to live with legalization. But it can be kind of annoying!&lt;/p&gt;
&lt;h2 id=&quot;the-solution%3A-javascript-bigints&quot;&gt;The solution: JavaScript BigInts &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#the-solution%3A-javascript-bigints&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript has &lt;a href=&quot;https://v8.js.cn/features/bigint&quot;&gt;BigInt&lt;/a&gt; values now, which represent integers of arbitrary size, so they can represent 64-bit integers properly. It is natural to want to use those to represent &lt;code&gt;i64&lt;/code&gt;s from Wasm. That’s exactly what the JS-BigInt-Integration feature does!&lt;/p&gt;
&lt;p&gt;Emscripten has support for Wasm BigInt integration, which we can use to compile the original example (without any hacks for legalization), by just adding &lt;code&gt;-s WASM_BIGINT&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emcc example.c --js-library example.js -o out.js -s WASM_BIGINT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then run it (note that we need to pass Node.js a flag to enable BigInt integration currently):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node --experimental-wasm-bigint a.out.js
JS received: 0xabcd12345678
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfect, exactly what we wanted!&lt;/p&gt;
&lt;p&gt;And not only is this simpler, but it’s faster. As mentioned earlier, in practice it’s rare that &lt;code&gt;i64&lt;/code&gt; conversions happen on a hot path, but when it does the slowdown can be noticeable. If we turn the above example into a benchmark, running many calls of &lt;code&gt;send_i64_to_js&lt;/code&gt;, then the BigInt version is 18% faster.&lt;/p&gt;
&lt;p&gt;Another benefit from BigInt integration is that the toolchain can avoid legalization. If Emscripten does not need to legalize then it may not have any work to do on the Wasm that LLVM emits, which speeds up build times. You can get that speedup if you build with &lt;code&gt;-s WASM_BIGINT&lt;/code&gt; and do not provide any other flags that require changes to be made. For example, &lt;code&gt;-O0 -s WASM_BIGINT&lt;/code&gt; works (but optimized builds &lt;a href=&quot;https://emscripten.org/docs/optimizing/Optimizing-Code.html#link-times&quot;&gt;run the Binaryen optimizer&lt;/a&gt; which is important for size).&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/wasm-bigint#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly BigInt integration has been implemented in &lt;a href=&quot;https://webassembly.org/roadmap/&quot;&gt;multiple browsers&lt;/a&gt;, including Chrome 85 (released 2020-08-25) so you can try it out today!&lt;/p&gt;
</content></entry><entry><title>`Atomics.wait`, `Atomics.notify`, `Atomics.waitAsync`</title><link href="https://v8.js.cn/features/atomics"/><updated>2020-09-24T00:00:00Z</updated><id>https://v8.js.cn/features/atomics</id><author><name>Marja Hölttä, a non-blocking blogger</name></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait&quot;&gt;&lt;code&gt;Atomics.wait&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify&quot;&gt;&lt;code&gt;Atomics.notify&lt;/code&gt;&lt;/a&gt; are low-level synchronization primitives useful for implementing mutexes and other means of synchronization. However, since &lt;code&gt;Atomics.wait&lt;/code&gt; is blocking, it’s not possible to call it on the main thread (trying to do so throws a &lt;code&gt;TypeError&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Starting from version 8.7, V8 supports a non-blocking version, &lt;a href=&quot;https://github.com/tc39/proposal-atomics-wait-async/blob/master/PROPOSAL.md&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt;&lt;/a&gt;, which is also usable on the main thread.&lt;/p&gt;
&lt;p&gt;In this post, we explain how to use these low-level APIs to implement a mutex that works both synchronously (for worker threads) and asynchronously (for worker threads or the main thread).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.waitAsync&lt;/code&gt; take the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: an &lt;code&gt;Int32Array&lt;/code&gt; or &lt;code&gt;BigInt64Array&lt;/code&gt; backed by a &lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;: a valid index within the array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectedValue&lt;/code&gt;: a value we expect to be present in the memory location described by &lt;code&gt;(buffer, index)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: a timeout in milliseconds (optional, defaults to &lt;code&gt;Infinity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The return value of &lt;code&gt;Atomics.wait&lt;/code&gt; is a string. If the memory location doesn’t contain the expected value, &lt;code&gt;Atomics.wait&lt;/code&gt; returns immediately with the value &lt;code&gt;&#39;not-equal&#39;&lt;/code&gt;. Otherwise, the thread is blocked until another thread calls &lt;code&gt;Atomics.notify&lt;/code&gt; with the same memory location or the timeout is reached. In the former case, &lt;code&gt;Atomics.wait&lt;/code&gt; returns the value &lt;code&gt;&#39;ok&#39;&lt;/code&gt;, in the latter case, &lt;code&gt;Atomics.wait&lt;/code&gt; returns the value &lt;code&gt;&#39;timed-out&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Atomics.notify&lt;/code&gt; takes the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an &lt;code&gt;Int32Array&lt;/code&gt; or &lt;code&gt;BigInt64Array&lt;/code&gt; backed by a &lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;an index (valid within the array)&lt;/li&gt;
&lt;li&gt;how many waiters to notify (optional, defaults to &lt;code&gt;Infinity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It notifies the given amount of waiters, in FIFO order, waiting on the memory location described by &lt;code&gt;(buffer, index)&lt;/code&gt;. If there are several pending &lt;code&gt;Atomics.wait&lt;/code&gt; calls or &lt;code&gt;Atomics.waitAsync&lt;/code&gt; calls related to the same location, they are all in the same FIFO queue.&lt;/p&gt;
&lt;p&gt;In contrast to &lt;code&gt;Atomics.wait&lt;/code&gt;, &lt;code&gt;Atomics.waitAsync&lt;/code&gt; always returns immediately. The return value is one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ async: false, value: &#39;not-equal&#39; }&lt;/code&gt; (if the memory location didn’t contain the expected value)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ async: false, value: &#39;timed-out&#39; }&lt;/code&gt; (only for immediate timeout 0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ async: true, value: promise }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The promise may later be resolved with a string value &lt;code&gt;&#39;ok&#39;&lt;/code&gt; (if &lt;code&gt;Atomics.notify&lt;/code&gt; was called with the same memory location) or &lt;code&gt;&#39;timed-out&#39;&lt;/code&gt; (if the timeout was reached). The promise is never rejected.&lt;/p&gt;
&lt;p&gt;The following example demonstrates the basic usage of &lt;code&gt;Atomics.waitAsync&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SharedArrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; i32a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//                                     |  |  ^ timeout (opt)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//                                     |  ^ expected value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//                                     ^ index&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;not-equal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// The value in the SharedArrayBuffer was not the expected one.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;  result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ok&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* notified */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* value is &#39;timed-out&#39; */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// In this thread, or in another thread:&lt;/span&gt;&lt;br /&gt;Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll show how to implement a mutex which can be used both synchronously and asynchronously. Implementing the synchronous version of the mutex has been previously discussed, e.g. &lt;a href=&quot;https://blogtitle.github.io/using-javascript-sharedarraybuffers-and-atomics/&quot;&gt;in this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the example, we don’t use the timeout parameter in &lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.waitAsync&lt;/code&gt;. The parameter can be used for implementing condition variables with a timeout.&lt;/p&gt;
&lt;p&gt;Our mutex class, &lt;code&gt;AsyncLock&lt;/code&gt;, operates on a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; and implements the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt; — blocks the thread until we&#39;re able to lock the mutex (usable only on a worker thread)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlock&lt;/code&gt; — unlocks the mutex (counterpart of &lt;code&gt;lock&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;executeLocked(callback)&lt;/code&gt; — non-blocking lock, can be used by the main thread; schedules &lt;code&gt;callback&lt;/code&gt; to be executed once we manage to get the lock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s see how each of those can be implemented. The class definition includes constants and a constructor which takes the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; as a parameter.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AsyncLock&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sab&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sab&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;executeLocked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;i32a[0]&lt;/code&gt; contains either the value &lt;code&gt;LOCKED&lt;/code&gt; or &lt;code&gt;UNLOCKED&lt;/code&gt;. It’s also the wait location for &lt;code&gt;Atomics.wait&lt;/code&gt;and &lt;code&gt;Atomics.waitAsync&lt;/code&gt;. The &lt;code&gt;AsyncLock&lt;/code&gt; class ensures the following invariants:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;i32a[0] == LOCKED&lt;/code&gt;, and a thread starts to wait (either via &lt;code&gt;Atomics.wait&lt;/code&gt; or &lt;code&gt;Atomics.waitAsync&lt;/code&gt;) on &lt;code&gt;i32a[0]&lt;/code&gt;, it will eventually be notified.&lt;/li&gt;
&lt;li&gt;After getting notified, the thread tries to grab the lock. If it gets the lock, it will notify again when releasing it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sync-lock-and-unlock&quot;&gt;Sync lock and unlock &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#sync-lock-and-unlock&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next we show the blocking &lt;code&gt;lock&lt;/code&gt; method which can only be called from a worker thread:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token comment&quot;&gt;/* old value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token comment&quot;&gt;/* new value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldValue &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                 AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;&amp;lt;&amp;lt; expected value at start&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a thread calls &lt;code&gt;lock()&lt;/code&gt;, first it tries to get the lock by using &lt;code&gt;Atomics.compareExchange&lt;/code&gt; to change the lock state from &lt;code&gt;UNLOCKED&lt;/code&gt; to &lt;code&gt;LOCKED&lt;/code&gt;. &lt;code&gt;Atomics.compareExchange&lt;/code&gt; tries to do the state change atomically, and it returns the original value of the memory location. If the original value was &lt;code&gt;UNLOCKED&lt;/code&gt;, we know the state change succeeded, and the thread acquired the lock. Nothing more is needed.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Atomics.compareExchange&lt;/code&gt; doesn’t manage to change the lock state, another thread must be holding the lock. Thus, this thread tries &lt;code&gt;Atomics.wait&lt;/code&gt; in order to wait for the other thread to release the lock. If the memory location still holds the expected value (in this case, &lt;code&gt;AsyncLock.LOCKED&lt;/code&gt;), calling &lt;code&gt;Atomics.wait&lt;/code&gt; will block the thread and the &lt;code&gt;Atomics.wait&lt;/code&gt; call will return only when another thread calls &lt;code&gt;Atomics.notify&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;unlock&lt;/code&gt; is method sets the lock to the &lt;code&gt;UNLOCKED&lt;/code&gt; state and calls &lt;code&gt;Atomics.notify&lt;/code&gt; to wake up one waiter which was waiting for the lock. The state change is always expected to succeed, since this thread is holding the lock, and nobody else should call &lt;code&gt;unlock()&lt;/code&gt; meanwhile.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token comment&quot;&gt;/* old value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token comment&quot;&gt;/* new value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldValue &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Tried to unlock while not holding the mutex&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The straightforward case goes as follows: the lock is free and thread T1 acquires it by changing the lock state with &lt;code&gt;Atomics.compareExchange&lt;/code&gt;. Thread T2 tries to acquire the lock by calling &lt;code&gt;Atomics.compareExchange&lt;/code&gt;, but it doesn’t succeed in changing the lock state. T2 then calls &lt;code&gt;Atomics.wait&lt;/code&gt;, which blocks the thread. At some point T1 releases the lock and calls &lt;code&gt;Atomics.notify&lt;/code&gt;. That makes the &lt;code&gt;Atomics.wait&lt;/code&gt; call in T2 return &lt;code&gt;&#39;ok&#39;&lt;/code&gt;, waking up T2. T2 then tries to acquire the lock again, and this time succeeds.&lt;/p&gt;
&lt;p&gt;There are also 2 possible corner cases — these demonstrate the reason for &lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.waitAsync&lt;/code&gt; checking for a specific value at the index:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T1 is holding the lock and T2 tries to get it. First, T2 tries to change the lock state with &lt;code&gt;Atomics.compareExchange&lt;/code&gt;, but doesn’t succeed. But then T1 releases the lock before T2 manages to call &lt;code&gt;Atomics.wait&lt;/code&gt;. When T2 calls &lt;code&gt;Atomics.wait&lt;/code&gt;, it returns immediately with the value &lt;code&gt;&#39;not-equal&#39;&lt;/code&gt;. In that case, T2 continues with the next loop iteration, trying to acquire the lock again.&lt;/li&gt;
&lt;li&gt;T1 is holding the lock and T2 is waiting for it with &lt;code&gt;Atomics.wait&lt;/code&gt;. T1 releases the lock — T2 wakes up (the &lt;code&gt;Atomics.wait&lt;/code&gt; call returns) and tries to do &lt;code&gt;Atomics.compareExchange&lt;/code&gt; to acquire the lock, but another thread T3 was faster and got the lock already. So the call to &lt;code&gt;Atomics.compareExchange&lt;/code&gt; fails to get the lock, and T2 calls &lt;code&gt;Atomics.wait&lt;/code&gt; again, blocking until T3 releases the lock.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the latter corner case, the mutex isn’t “fair”. It’s possible that T2 has been waiting for the lock to be released, but T3 comes and gets it immediately. A more realistic lock implementation may use several states to differentiate between “locked” and “locked with contention”.&lt;/p&gt;
&lt;h2 id=&quot;async-lock&quot;&gt;Async lock &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#async-lock&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The non-blocking &lt;code&gt;executeLocked&lt;/code&gt; method is callable from the main thread, unlike the blocking &lt;code&gt;lock&lt;/code&gt; method. It gets a callback function as its only parameter and schedules the callback to be executed once it has successfully acquired the lock.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;executeLocked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; self &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tryGetLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; oldValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                          &lt;span class=&quot;token comment&quot;&gt;/* old value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                          &lt;span class=&quot;token comment&quot;&gt;/* new value &gt;&gt;&gt; */&lt;/span&gt;  AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldValue &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNLOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Atomics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i32a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                       AsyncLock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                                   &lt;span class=&quot;token comment&quot;&gt;//  ^ expected value at start&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;tryGetLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inner function &lt;code&gt;tryGetLock&lt;/code&gt; tries to first get the lock with &lt;code&gt;Atomics.compareExchange&lt;/code&gt;, as before. If that successfully changes the lock state, it can execute the callback, unlock the lock, and return.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Atomics.compareExchange&lt;/code&gt; fails to get the lock, we need to try again when the lock is probably free. We can’t block and wait for the lock to become free — instead, we schedule the new try using &lt;code&gt;Atomics.waitAsync&lt;/code&gt; and the Promise it returns.&lt;/p&gt;
&lt;p&gt;If we successfully started &lt;code&gt;Atomics.waitAsync&lt;/code&gt;, the returned Promise resolves when the lock-holding thread does &lt;code&gt;Atomics.notify&lt;/code&gt;. Then the thread that was waiting for the lock tries to get the lock again, like before.&lt;/p&gt;
&lt;p&gt;The same corner cases (the lock getting released between the &lt;code&gt;Atomics.compareExchange&lt;/code&gt; call and the &lt;code&gt;Atomics.waitAsync&lt;/code&gt; call, as well as the lock getting acquired again between the Promise resolving and the &lt;code&gt;Atomics.compareExchange&lt;/code&gt; call) are possible in the asynchronous version too, so the code has to handle them in a robust way.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, we showed how to use the synchronization primitives &lt;code&gt;Atomics.wait&lt;/code&gt;, &lt;code&gt;Atomics.waitAsync&lt;/code&gt;, and &lt;code&gt;Atomics.notify&lt;/code&gt;, to implement a mutex which is usable both in the main thread an in worker threads.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Feature support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;atomics.wait-and-atomics.notify&quot;&gt;&lt;code&gt;Atomics.wait&lt;/code&gt; and &lt;code&gt;Atomics.notify&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#atomics.wait-and-atomics.notify&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;68&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;78&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;8.10.0&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
&lt;h3 id=&quot;atomics.waitasync&quot;&gt;&lt;code&gt;Atomics.waitAsync&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/atomics#atomics.waitasync&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;87&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Logical assignment</title><link href="https://v8.js.cn/features/logical-assignment"/><updated>2020-05-07T00:00:00Z</updated><id>https://v8.js.cn/features/logical-assignment</id><author><name>Shu-yu Guo (@_shu)</name></author><content type="html">&lt;p&gt;JavaScript supports a range of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators&quot;&gt;compound assignment operators&lt;/a&gt; that let programmers succinctly express a binary operation together with assignment. Currently, only mathematical or bitwise operations are supported.&lt;/p&gt;
&lt;p&gt;What has been missing is the ability to combine logical operations with assignment. Until now! JavaScript now supports logical assignment with the new operators &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, and &lt;code&gt;??=&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;logical-assignment-operators&quot;&gt;Logical assignment operators &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/logical-assignment#logical-assignment-operators&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the new operators, let’s have a refresher on the existing compound assignment operators. For instance, the meaning of &lt;code&gt;lhs += rhs&lt;/code&gt; is roughly equivalent to &lt;code&gt;lhs = lhs + rhs&lt;/code&gt;. This rough equivalence holds for all the existing operators &lt;code&gt;@=&lt;/code&gt; where &lt;code&gt;@&lt;/code&gt; stands in for a binary operator like &lt;code&gt;+&lt;/code&gt;, or &lt;code&gt;|&lt;/code&gt;. It is worth noting this is, strictly speaking, only correct when &lt;code&gt;lhs&lt;/code&gt; is a variable. For more complex left-hand sides in expressions like &lt;code&gt;obj[computedPropertyName()] += rhs&lt;/code&gt;, the left-hand side is only evaluated once.&lt;/p&gt;
&lt;p&gt;Let’s now dive into the new operators. In contrast with the existing operators, &lt;code&gt;lhs @= rhs&lt;/code&gt; does not roughly mean &lt;code&gt;lhs = lhs @ rhs&lt;/code&gt; when &lt;code&gt;@&lt;/code&gt; is a logical operation: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, or &lt;code&gt;??&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// As an additional review, here is the semantics of logical and:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → y when x is truthy&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → x when x is not truthy&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// First, logical and assignment. The two lines following this&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// comment block are equivalent.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Note that like existing compound assignment operators, more complex&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// left-hand sides are only evaluated once.&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The semantics of logical or:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → x when x is truthy&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → y when x is not truthy&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Similarly, logical or assignment:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;||=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The semantics of nullish coalescing operator:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → y when x is nullish (null or undefined)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → x when x is not nullish&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Finally, nullish coalescing assignment:&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;??=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;x &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;short-circuit-semantics&quot;&gt;Short-circuit semantics &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/logical-assignment#short-circuit-semantics&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike their mathematical and bitwise counterparts, logical assignments follow the short-circuiting behavior of their respective logical operations. They &lt;em&gt;only&lt;/em&gt; perform an assignment if the logical operation would evaluate the right-hand side.&lt;/p&gt;
&lt;p&gt;At first this may seem confusing. Why not unconditionally assign to the left-hand side like in other compound assignments?&lt;/p&gt;
&lt;p&gt;There is a good practical reason for the difference. When combining logical operations with assignment, the assignment may cause a side-effect that should happen conditionally based on the result of that logical operation. Causing the side-effect unconditionally can negatively affect the performance or even correctness of the program.&lt;/p&gt;
&lt;p&gt;Let’s make this concrete with an example of two versions of a function that sets a default message in an element.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Display a default message if it doesn’t override anything.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Only assigns to innerHTML if it’s empty. Doesn’t cause inner&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// elements of msgElement to lose focus.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setDefaultMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  msgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;p&gt;No messages&amp;lt;p&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Display a default message if it doesn’t override anything.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Buggy! May cause inner elements of msgElement to&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// lose focus every time it’s called.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setDefaultMessageBuggy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  msgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; msgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;p&gt;No messages&amp;lt;p&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Because the &lt;code&gt;innerHTML&lt;/code&gt; property is &lt;a href=&quot;https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml&quot;&gt;specified&lt;/a&gt; to return the empty string instead of &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt; must be used instead of &lt;code&gt;??=&lt;/code&gt;. When writing code, keep in mind that many web APIs do not use &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to mean empty or absent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In HTML, assigning to the &lt;code&gt;.innerHTML&lt;/code&gt; property on an element is destructive. Inner children are deleted, and new children parsed from the newly assigned string are inserted. Even when the new string is the same as the old string, it causes both additional work and the inner elements to lose focus. For this practical reason of not causing unwanted side-effects, the semantics of logical assignment operators short-circuit the assignment.&lt;/p&gt;
&lt;p&gt;It may help to think about the symmetry with other compound assignment operators in the following way. Mathematical and bitwise operators are unconditional, and so the assignment is also unconditional. Logical operators are conditional, and so the assignment is also conditional.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Logical assignment support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/logical-assignment#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;85&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1629106&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;79&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://developer.apple.com/documentation/safari-release-notes/safari-14-beta-release-notes#New-Features:~:text=Added%2520logical%2520assignment%2520operator%2520support.&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;14&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-logical-assignment-operators&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>`Intl.DisplayNames`</title><link href="https://v8.js.cn/features/intl-displaynames"/><updated>2020-02-13T00:00:00Z</updated><id>https://v8.js.cn/features/intl-displaynames</id><author><name>Shu-yu Guo (@_shu) and Frank Tang</name></author><content type="html">&lt;p&gt;Web applications that reach a global audience need to show the display names of languages, regions, scripts, and currencies in many different languages. The translations of those names require data, which is available in the &lt;a href=&quot;http://cldr.unicode.org/translation/&quot;&gt;Unicode CLDR&lt;/a&gt;. Packaging the data as part of the application incurs a cost on developer time. Users are likely to prefer consistent translations of language and region names, and keeping that data up to date with the world&#39;s geopolitical happenings requires constant maintenance.&lt;/p&gt;
&lt;p&gt;Luckily, most JavaScript runtimes already ship and keep up-to-date that very same translation data. The new &lt;code&gt;Intl.DisplayNames&lt;/code&gt; API gives JavaScript developers direct access to those translations, allowing applications to more easily display localized names.&lt;/p&gt;
&lt;h2 id=&quot;usage-examples&quot;&gt;Usage examples &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/intl-displaynames#usage-examples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following example shows how to create an &lt;code&gt;Intl.DisplayNames&lt;/code&gt; object to get region names in English using &lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot;&gt;ISO-3166 2-letter country codes&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regionNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;region&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;regionNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;US&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;United States&#39;&lt;/span&gt;&lt;br /&gt;regionNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;BA&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;Bosnia &amp;amp; Herzegovina&#39;&lt;/span&gt;&lt;br /&gt;regionNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;MM&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;Myanmar (Burma)&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following example gets language names in Traditional Chinese using &lt;a href=&quot;http://unicode.org/reports/tr35/#Unicode_language_identifier&quot;&gt;Unicode&#39;s language identifier grammar&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; languageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;zh-Hant&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;language&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;languageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fr&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;法文&#39;&lt;/span&gt;&lt;br /&gt;languageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;zh&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;中文&#39;&lt;/span&gt;&lt;br /&gt;languageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;de&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;德文&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following example gets currency names in Simplified Chinese using &lt;a href=&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;&gt;ISO-4217 3-letter currency codes&lt;/a&gt;. In languages that have distinct singular and plural forms, the currency names are singular. For plural forms, &lt;a href=&quot;https://v8.dev/features/intl-numberformat&quot;&gt;&lt;code&gt;Intl.NumberFormat&lt;/code&gt;&lt;/a&gt; may be used.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currencyNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;zh-Hans&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;currency&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;currencyNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;USD&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;美元&#39;&lt;/span&gt;&lt;br /&gt;currencyNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;EUR&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;欧元&#39;&lt;/span&gt;&lt;br /&gt;currencyNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;JPY&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;日元&#39;&lt;/span&gt;&lt;br /&gt;currencyNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CNY&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;人民币&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following example shows the final supported type, scripts, in English, using &lt;a href=&quot;http://unicode.org/iso15924/iso15924-codes.html&quot;&gt;ISO-15924 4-letter script codes&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; scriptNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;script&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;scriptNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Latn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;Latin&#39;&lt;/span&gt;&lt;br /&gt;scriptNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Arab&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;Arabic&#39;&lt;/span&gt;&lt;br /&gt;scriptNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Kana&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;Katakana&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more advanced usage, the second &lt;code&gt;options&lt;/code&gt; parameter also supports the &lt;code&gt;style&lt;/code&gt; property. The &lt;code&gt;style&lt;/code&gt; property corresponds to the width of the display name and may be either &lt;code&gt;&amp;quot;long&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;short&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;narrow&amp;quot;&lt;/code&gt;. The values for different styles do not always differ. The default is &lt;code&gt;&amp;quot;long&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; longLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;language&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;longLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en-US&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;American English&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shortLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;language&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;short&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;shortLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en-US&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;US English&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; narrowLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;language&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;narrow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;narrowLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en-US&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;US English&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;full-api&quot;&gt;Full API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/intl-displaynames#full-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full API for &lt;code&gt;Intl.DisplayNames&lt;/code&gt; is as follows.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; locales &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; code &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The constructor is consistent with other &lt;code&gt;Intl&lt;/code&gt; APIs. Its first argument is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation&quot;&gt;list of locales&lt;/a&gt;, and its second parameter is an &lt;code&gt;options&lt;/code&gt; parameter that takes &lt;code&gt;localeMatcher&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;style&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;localeMatcher&amp;quot;&lt;/code&gt; property is treated the same as in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation&quot;&gt;other &lt;code&gt;Intl&lt;/code&gt; APIs&lt;/a&gt;. The &lt;code&gt;type&lt;/code&gt; property may be &lt;code&gt;&amp;quot;region&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;language&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;currency&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;script&amp;quot;&lt;/code&gt;. The &lt;code&gt;style&lt;/code&gt; property may be &lt;code&gt;&amp;quot;long&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;short&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;narrow&amp;quot;&lt;/code&gt;, with &lt;code&gt;&amp;quot;long&amp;quot;&lt;/code&gt; being the default.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Intl.DisplayNames.prototype.of( code )&lt;/code&gt; expects the following formats depending on the &lt;code&gt;type&lt;/code&gt; of how the instance is constructed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;&amp;quot;region&amp;quot;&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt; must be either an &lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot;&gt;ISO-3166 2-letter country code&lt;/a&gt; or a &lt;a href=&quot;https://unstats.un.org/unsd/methodology/m49/&quot;&gt;UN M49 3-digit region code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;&amp;quot;language&amp;quot;&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt; must be conform to &lt;a href=&quot;https://unicode.org/reports/tr35/#Unicode_language_identifier&quot;&gt;Unicode&#39;s language identifier grammar&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;&amp;quot;currency&amp;quot;&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt; must be a &lt;a href=&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;&gt;ISO-4217 3-letter currency code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;&amp;quot;script&amp;quot;&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt; must be a &lt;a href=&quot;https://unicode.org/iso15924/iso15924-codes.html&quot;&gt;ISO-15924 4-letter script code&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/intl-displaynames#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like other &lt;code&gt;Intl&lt;/code&gt; APIs, as &lt;code&gt;Intl.DisplayNames&lt;/code&gt; become more widely available, libraries and applications will opt to drop packaging and shipping their own translation data in favor of using the native functionality.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;&lt;code&gt;Intl.DisplayNames&lt;/code&gt; support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/intl-displaynames#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://v8.js.cn/blog/v8-release-81#intl.displaynames&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;81&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;14&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Fast, parallel applications with WebAssembly SIMD</title><link href="https://v8.js.cn/features/simd"/><updated>2020-06-09T00:00:00Z</updated><id>https://v8.js.cn/features/simd</id><author><name>Deepti Gandluri (@dptig), Thomas Lively (@tlively52)</name></author><content type="html">&lt;p&gt;SIMD stands for &lt;em&gt;Single Instruction, Multiple Data&lt;/em&gt;. SIMD instructions are a special class of instructions that exploit data parallelism in applications by simultaneously performing the same operation on multiple data elements. Compute intensive applications like audio/video codecs, image processors, are all examples of applications that take advantage of SIMD instructions to accelerate performance. Most modern architectures support some variants of SIMD instructions.&lt;/p&gt;
&lt;p&gt;The WebAssembly SIMD proposal defines a portable, performant subset of SIMD operations that are available across most modern architectures. This proposal derived many elements from the &lt;a href=&quot;https://github.com/tc39/ecmascript_simd&quot;&gt;SIMD.js proposal&lt;/a&gt;, which in turn was originally derived from the &lt;a href=&quot;https://www.researchgate.net/publication/261959129_A_SIMD_programming_model_for_dart_javascriptand_other_dynamically_typed_scripting_languages&quot;&gt;Dart SIMD&lt;/a&gt; specification. The SIMD.js proposal was an API proposed at TC39 with new types and functions for performing SIMD computations, but this was archived in favor of supporting SIMD operations more transparently in WebAssembly. The &lt;a href=&quot;https://github.com/WebAssembly/simd&quot;&gt;WebAssembly SIMD proposal&lt;/a&gt; was introduced as a way for browsers to take advantage of the data level parallelism using the underlying hardware.&lt;/p&gt;
&lt;h2 id=&quot;webassembly-simd-proposal&quot;&gt;WebAssembly SIMD proposal &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#webassembly-simd-proposal&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The high-level goal of the WebAssembly SIMD proposal is to introduce vector operations to the WebAssembly Specification, in a way that guarantees portable performance.&lt;/p&gt;
&lt;p&gt;The set of SIMD instructions is large, and varied across architectures. The set of operations included in the WebAssembly SIMD proposal consist of operations that are well supported on a wide variety of platforms, and are proven to be performant. To this end, the current proposal is limited to standardizing Fixed-Width 128-bit SIMD operations.&lt;/p&gt;
&lt;p&gt;The current proposal introduces a new v128 value type, and a number of new operations that operate on this type. The criteria used to determine these operations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The operations should be well supported across multiple modern architectures.&lt;/li&gt;
&lt;li&gt;Performance wins should be positive across multiple relevant architectures within an instruction group.&lt;/li&gt;
&lt;li&gt;The chosen set of operations should minimize performance cliffs if any.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The proposal is in active development, both V8 and the toolchain have working prototype implementations for experimentation. As these are prototype implementations, they are subject to change as new operations are added to the proposal.&lt;/p&gt;
&lt;h2 id=&quot;using-webassembly-simd&quot;&gt;Using WebAssembly SIMD &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#using-webassembly-simd&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;enabling-experimental-simd-support-in-chrome&quot;&gt;Enabling experimental SIMD support in Chrome &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#enabling-experimental-simd-support-in-chrome&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebAssembly SIMD support is prototyped behind a flag in Chrome, to try out the SIMD support on the browser, pass &lt;code&gt;--enable-features=WebAssemblySimd&lt;/code&gt;, or toggle the &amp;quot;WebAssembly SIMD support&amp;quot; flag in &lt;code&gt;chrome://flags&lt;/code&gt;. This work is bleeding edge, and continuously being worked on. To minimize the chances of breakage, please use the latest version of the toolchain as detailed below, and a recent Chrome Canary. If something doesn’t look right, please &lt;a href=&quot;https://crbug.com/v8&quot;&gt;file a bug&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;building-c-%2F-c%2B%2B-to-target-simd&quot;&gt;Building C / C++ to target SIMD &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#building-c-%2F-c%2B%2B-to-target-simd&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebAssembly’s SIMD support depends on using a recent build of clang with the WebAssembly LLVM backend enabled. Emscripten has support for the WebAssembly SIMD proposal as well. Install and activate the latest-upstream distribution of emscripten using &lt;a href=&quot;https://emscripten.org/docs/getting_started/downloads.html&quot;&gt;emsdk&lt;/a&gt; to use the bleeding edge SIMD features.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;./emsdk &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; latest-upstream&lt;br /&gt;&lt;br /&gt;./emsdk activate latest-upstream&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of different ways to enable generating SIMD code when porting your application to use SIMD. Once the latest upstream emscripten version has been installed, compile using emscripten, and pass the &lt;code&gt;-msimd128&lt;/code&gt; flag to enable SIMD.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;emcc -msimd128 -O3 foo.c -o foo.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Applications that have already been ported to use WebAssembly may benefit from SIMD with no source modifications thanks to LLVM’s autovectorization optimizations.&lt;/p&gt;
&lt;p&gt;These optimizations can automatically transform loops that perform arithmetic operations on each iteration into equivalent loops that perform the same arithmetic operations on multiple inputs at a time using SIMD instructions. LLVM’s autovectorizers are enabled by default at optimization levels &lt;code&gt;-O2&lt;/code&gt; and &lt;code&gt;-O3&lt;/code&gt; when the &lt;code&gt;-msimd128&lt;/code&gt; flag is supplied.&lt;/p&gt;
&lt;p&gt;For example, consider the following function that multiplies the elements of two input arrays together and stores the results in an output array.&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply_arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; out&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; in_a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; in_b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    out&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; in_a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; in_b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without passing the &lt;code&gt;-msimd128&lt;/code&gt; flag, the compiler emits this WebAssembly loop:&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;loop&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;store&lt;/span&gt;&lt;br /&gt;    … get address in `out` …&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mul&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load&lt;/span&gt; … get address in `in_a` …&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load&lt;/span&gt; … get address in `in_b` …&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  …&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when the &lt;code&gt;-msimd128&lt;/code&gt; flag is used, the autovectorizer turns this into code that includes the following loop:&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;loop&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v128.store &lt;span class=&quot;token keyword&quot;&gt;align&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;    … get address in `out` …&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i32x4.mul&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v128.load &lt;span class=&quot;token keyword&quot;&gt;align&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; … get address in `in_a` …&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v128.load &lt;span class=&quot;token keyword&quot;&gt;align&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; … get address in `in_b` …&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    …&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The loop body has the same structure but SIMD instructions are being used to load, multiply, and store four elements at a time inside the loop body.&lt;/p&gt;
&lt;p&gt;For finer grained control over the SIMD instructions generated by the compiler, include the &lt;a href=&quot;https://github.com/llvm/llvm-project/blob/master/clang/lib/Headers/wasm_simd128.h&quot;&gt;&lt;code&gt;wasm_simd128.h&lt;/code&gt; header file&lt;/a&gt;, which defines a set of intrinsics. Intrinsics are special functions that, when called, will be turned by the compiler into the corresponding WebAssembly SIMD instructions, unless it can make further optimizations.&lt;/p&gt;
&lt;p&gt;As an example, here is the same function from before manually rewritten to use the SIMD intrinsics.&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;wasm_simd128.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply_arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; out&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; in_a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; in_b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    v128_t a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wasm_v128_load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;in_a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    v128_t b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wasm_v128_load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;in_b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    v128_t prod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wasm_i32x4_mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;wasm_v128_store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prod&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This manually rewritten code assumes that the input and output arrays are aligned and do not alias and that size is a multiple of four. The autovectorizer cannot make these assumptions and has to generate extra code to handle the cases where they are not true, so hand-written SIMD code often ends up being smaller than autovectorized SIMD code.&lt;/p&gt;
&lt;h2 id=&quot;compelling-use-cases&quot;&gt;Compelling use cases &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#compelling-use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The WebAssembly SIMD proposal seeks to accelerate high compute applications like audio/video codecs, image processing applications, cryptographic applications, etc. Currently WebAssembly SIMD is experimentally supported in widely used open source projects like &lt;a href=&quot;https://github.com/halide/Halide/blob/master/README_webassembly.md&quot;&gt;Halide&lt;/a&gt;, &lt;a href=&quot;https://docs.opencv.org/3.4/d5/d10/tutorial_js_root.html&quot;&gt;OpenCV.js&lt;/a&gt;, and &lt;a href=&quot;https://github.com/google/XNNPACK&quot;&gt;XNNPACK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some interesting demos come from the &lt;a href=&quot;https://github.com/google/mediapipe&quot;&gt;MediaPipe project&lt;/a&gt; by the Google Research team.&lt;/p&gt;
&lt;p&gt;As per their description, MediaPipe is a framework for building multimodal (eg. video, audio, any time series data) applied ML pipelines. And they have a &lt;a href=&quot;https://mediapipe.page.link/web&quot;&gt;Web version&lt;/a&gt;, too!&lt;/p&gt;
&lt;p&gt;One of the most visually appealing demos where it’s easy to observe the difference in performance SIMD makes, is a following hand-tracking system. Without SIMD, you can get only around 3 frames per second on a modern laptop, while with SIMD enabled you get a much smoother experience at 15-16 frames per second.&lt;/p&gt;
&lt;figure&gt;
  &lt;video autoplay=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; loop=&quot;&quot; width=&quot;600&quot; height=&quot;216&quot; src=&quot;https://v8.js.cn/_img/simd/hand.mp4&quot;&gt;&lt;/video&gt;
&lt;/figure&gt;
&lt;p&gt;Visit the &lt;a href=&quot;https://pursuit.page.link/MediaPipeHandTrackingSimd&quot;&gt;demo&lt;/a&gt; in Chrome Canary with SIMD enabled to try it!&lt;/p&gt;
&lt;p&gt;Another interesting set of demos that makes use of SIMD for smooth experience, come from OpenCV - a popular computer vision library that can also be compiled to WebAssembly. They’re available by &lt;a href=&quot;https://bit.ly/opencv-camera-demos&quot;&gt;link&lt;/a&gt;, or you can check out the pre-recorded versions below:&lt;/p&gt;
&lt;figure&gt;
  &lt;video autoplay=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; loop=&quot;&quot; width=&quot;256&quot; height=&quot;512&quot; src=&quot;https://v8.js.cn/_img/simd/credit-card.mp4&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Card reading&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;video autoplay=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; loop=&quot;&quot; width=&quot;600&quot; height=&quot;646&quot; src=&quot;https://v8.js.cn/_img/simd/invisibility-cloak.mp4&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Invisibility cloak&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;video autoplay=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; loop=&quot;&quot; width=&quot;600&quot; height=&quot;658&quot; src=&quot;https://v8.js.cn/_img/simd/emotion-recognizer.mp4&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Emoji replacement&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;simd-origin-trial&quot;&gt;SIMD Origin Trial &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#simd-origin-trial&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The WebAssembly SIMD origin trial is available for experimentation in Chrome versions 84-86. Origin trials allow developers to experiment with a feature, and provide valuable feedback. Once an origin trial token has been registered, the trial users are opted into the feature for the duration of the trial period without having to update Chrome flags.&lt;/p&gt;
&lt;p&gt;To try this out, read the &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot;&gt;origin trial developer guide&lt;/a&gt;, and &lt;a href=&quot;https://developers.chrome.com/origintrials/#/view_trial/-4708513410415853567&quot;&gt;register for an origin trial token&lt;/a&gt;. More information about origin trials can be found in the &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md#faq&quot;&gt;FAQ&lt;/a&gt;, please file a &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/entry&quot;&gt;bug&lt;/a&gt; if something isn&#39;t working as you expect. The origin trial is compatible with emscripten versions 1.39.15 onwards.&lt;/p&gt;
&lt;p&gt;Ongoing experimental support is available on a recent Chrome Canary as detailed &lt;a href=&quot;https://v8.js.cn/features/simd#using-webassembly-simd&quot;&gt;above&lt;/a&gt;, with the use of latest-upstream Emscripten toolchain.&lt;/p&gt;
&lt;h2 id=&quot;future-work&quot;&gt;Future work &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/simd#future-work&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The current SIMD proposal is in &lt;a href=&quot;https://github.com/WebAssembly/meetings/blob/master/process/phases.md#3-implementation-phase-community--working-group&quot;&gt;Phase 3&lt;/a&gt;, so the future work here is to push the proposal forward in the standardization process. Fixed width SIMD gives significant performance gains over scalar, but it doesn’t effectively leverage wider width vector operations that are available in modern hardware. As the current proposal moves forward, some future facing work here is to determine the feasibility of extending the proposal with longer width operations.&lt;/p&gt;
</content></entry><entry><title>RegExp match indices</title><link href="https://v8.js.cn/features/regexp-match-indices"/><updated>2019-12-17T00:00:00Z</updated><id>https://v8.js.cn/features/regexp-match-indices</id><author><name>Maya Armyanova (@Zmayski), regularly expressing new features</name></author><content type="html">&lt;p&gt;JavaScript is now equipped with a new regular expression enhancement, called “match indices”. Imagine you want to find invalid variable names in JavaScript code that coincide with reserved words, and output a caret and an “underline” under the variable name, like:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Invalid variable name&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, &lt;code&gt;function&lt;/code&gt; is a reserved word and cannot be used as a variable name. For that we might write the following function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;displayError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;\&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\b&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;re&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Index `1` corresponds to the first capture group.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; match&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Adjust the caret position.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;^&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;end &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// Append the underline.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;token comment&quot;&gt;// Append the message.&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;const function = foo;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// faulty code&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;displayError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Invalid variable name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For simplicity, the above example contains only a few of the JavaScript &lt;a href=&quot;https://mathiasbynens.be/notes/reserved-keywords&quot;&gt;reserved words&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In short, the new &lt;code&gt;indices&lt;/code&gt; array stores the start and end positions of each matched capture group. This new array is available when the source regular expression uses the &lt;code&gt;/d&lt;/code&gt; flag for all builtins producing regular expression match objects, including &lt;code&gt;RegExp#exec&lt;/code&gt;, &lt;code&gt;String#match&lt;/code&gt;, and &lt;a href=&quot;https://v8.dev/features/string-matchall&quot;&gt;&lt;code&gt;String#matchAll&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read on if you’re interested in how it works in more detail.&lt;/p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/regexp-match-indices#motivation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s move to a more involved example and think about how you’d solve the task of parsing a programming language (for instance what the &lt;a href=&quot;https://github.com/microsoft/TypeScript/tree/master/src/compiler&quot;&gt;TypeScript compiler&lt;/a&gt; does) — first split the input source code into tokens, then give a syntactic structure to those tokens. If the user wrote some syntactically incorrect code, you’d want to present them with a meaningful error, ideally pointing to the location where the problematic code was first encountered. For example, given the following code snippet:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// some other code&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’d want to present the programmer with an error like:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&lt;br /&gt;SyntaxError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Identifier &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt; has already been declared&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To achieve this, we need a few building blocks, the first of which is recognizing TypeScript identifiers. Then we’ll focus on pinpointing the exact location where the error occurred. Let’s consider the following example, using a regex to tell whether a string is a valid identifier:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isIdentifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[a-zA-Z_$][0-9a-zA-Z_$]*$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A real-world parser could make use of the newly introduced &lt;a href=&quot;https://github.com/tc39/proposal-regexp-unicode-property-escapes#other-examples&quot;&gt;property escapes in regexes&lt;/a&gt; and use the following regular expression for matching all valid ECMAScript identifier names:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[$_\p{ID_Start}][$_\u200C\u200D\p{ID_Continue}]*$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;u&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For simplicity, let’s stick to our previous regex, which matches only Latin characters, numbers, and underscores.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If we encounter an error with a variable declaration like above and want to print the exact position to the user, we might want to extend the regex from above and use a similar function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDeclarationPosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;(let|const|var)\s+([a-zA-Z_$][0-9a-zA-Z_$]*)&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;match&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; match&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could use the &lt;code&gt;index&lt;/code&gt; property on the match object returned by &lt;code&gt;RegExp.prototype.exec&lt;/code&gt;, which returns the starting position of the whole match. For use cases like the one described above though, you’d often want to use (possibly multiple) capture groups. Until recently, JavaScript didn’t expose the indices where the substrings matched by capture groups begin and end.&lt;/p&gt;
&lt;h2 id=&quot;regexp-match-indices-explained&quot;&gt;RegExp match indices explained &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/regexp-match-indices#regexp-match-indices-explained&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ideally we want to print an error at the position of the variable name, not at the &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; keyword (as the example above does). But for that we’d need to find the position of the capture group with index &lt;code&gt;2&lt;/code&gt;. (Index &lt;code&gt;1&lt;/code&gt; refers to the &lt;code&gt;(let|const|var)&lt;/code&gt; capture group and &lt;code&gt;0&lt;/code&gt; refers to the entire match.)&lt;/p&gt;
&lt;p&gt;As mentioned above, &lt;a href=&quot;https://github.com/tc39/proposal-regexp-match-indices&quot;&gt;the new JavaScript feature&lt;/a&gt; adds an &lt;code&gt;indices&lt;/code&gt; property on the result (the array of substrings) of &lt;code&gt;RegExp.prototype.exec()&lt;/code&gt;. Let’s enhance our example from above to make use of this new property:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getVariablePosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Notice the `d` flag, which enables `match.indices`&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\s&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;zA&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Z_&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;zA&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Z_&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;match&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; match&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getVariablePosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;let foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → [4, 7]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example returns the array &lt;code&gt;[4, 7]&lt;/code&gt;, which is the &lt;code&gt;[start, end)&lt;/code&gt; position of the matched substring from the group with index &lt;code&gt;2&lt;/code&gt;. Based on this information, our compiler can now print the desired error.&lt;/p&gt;
&lt;h2 id=&quot;additional-features&quot;&gt;Additional features &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/regexp-match-indices#additional-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;indices&lt;/code&gt; object also contains a &lt;code&gt;groups&lt;/code&gt; property, which can be indexed by the names of the &lt;a href=&quot;https://mathiasbynens.be/notes/es-regexp-proposals#named-capture-groups&quot;&gt;named capture groups&lt;/a&gt;. Using that, the function from above can be rewritten as:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getVariablePosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;keyword&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\s&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;zA&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Z_&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;zA&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Z_&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;match&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; match&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;indices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;groups&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getVariablePosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;let foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;support-for-regexp-match-indices&quot;&gt;Support for RegExp match indices &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/regexp-match-indices#support-for-regexp-match-indices&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=9548&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;90&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1519483&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=202475&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>`String.prototype.replaceAll`</title><link href="https://v8.js.cn/features/string-replaceall"/><updated>2019-11-11T00:00:00Z</updated><id>https://v8.js.cn/features/string-replaceall</id><author><name>Mathias Bynens (@mathias)</name></author><content type="html">&lt;p&gt;If you’ve ever dealt with strings in JavaScript, chances are you came across the &lt;code&gt;String#replace&lt;/code&gt; method. &lt;code&gt;String.prototype.replace(searchValue, replacement)&lt;/code&gt; returns a string with some matches replaced, based on the parameters you specify:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;a_c&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏🍋🍊🍓&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;🥭&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;🥭🍋🍊🍓&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A common use case is replacing &lt;em&gt;all&lt;/em&gt; instances of a given substring. However, &lt;code&gt;String#replace&lt;/code&gt; doesn’t directly address this use case. When &lt;code&gt;searchValue&lt;/code&gt; is a string, only the first occurrence of the substring gets replaced:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;aabbcc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;aa_bcc&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏🍏🍋🍋🍊🍊🍓🍓&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;🥭&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;🥭🍏🍋🍋🍊🍊🍓🍓&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To work around this, developers often turn the search string into a regular expression with the global (&lt;code&gt;g&lt;/code&gt;) flag. This way, &lt;code&gt;String#replace&lt;/code&gt; does replace &lt;em&gt;all&lt;/em&gt; matches:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;aabbcc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;aa__cc&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏🍏🍋🍋🍊🍊🍓🍓&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;🍏&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;🥭&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;🥭🥭🍋🍋🍊🍊🍓🍓&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a developer, it’s annoying to have to do this string-to-regexp conversion if all you really want is a global substring replacement. More importantly, this conversion is error-prone, and a common source of bugs! Consider the following example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;q=query+string+parameters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;q=query string+parameters&#39; ❌&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Only the first occurrence gets replaced.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → SyntaxError: invalid regular expression ❌&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// As it turns out, `+` is a special character within regexp patterns.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;q=query string+parameters&#39; ❌&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Escaping special regexp characters makes the regexp valid, but&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// this still only replaces the first occurrence of `+` in the string.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;q=query string parameters&#39; ✅&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Escaping special regexp characters AND using the `g` flag makes it work.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turning a string literal like &lt;code&gt;&#39;+&#39;&lt;/code&gt; into a global regular expression is not just a matter of removing the &lt;code&gt;&#39;&lt;/code&gt; quotes, wrapping it into &lt;code&gt;/&lt;/code&gt; slashes, and appending the &lt;code&gt;g&lt;/code&gt; flag — we must escape any characters that have a special meaning in regular expressions. This is easy to forget, and hard to get right, since JavaScript doesn’t offer a built-in mechanism to escape regular expression patterns.&lt;/p&gt;
&lt;p&gt;An alternate workaround is to combine &lt;code&gt;String#split&lt;/code&gt; with &lt;code&gt;Array#join&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;q=query+string+parameters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;q=query string parameters&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach avoids any escaping but comes with the overhead of splitting the string into an array of parts only to glue it back together.&lt;/p&gt;
&lt;p&gt;Clearly, none of these workarounds are ideal. Wouldn’t it be nice if a basic operation such as global substring replacement would be straightforward in JavaScript?&lt;/p&gt;
&lt;h2 id=&quot;string.prototype.replaceall&quot;&gt;&lt;code&gt;String.prototype.replaceAll&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/string-replaceall#string.prototype.replaceall&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The new &lt;code&gt;String#replaceAll&lt;/code&gt; method solves these problems and provides a straightforward mechanism to perform global substring replacement:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;aabbcc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;aa__cc&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏🍏🍋🍋🍊🍊🍓🍓&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🍏&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;🥭&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;🥭🥭🍋🍋🍊🍊🍓🍓&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;q=query+string+parameters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;q=query string parameters&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For consistency with the pre-existing APIs in the language, &lt;code&gt;String.prototype.replaceAll(searchValue, replacement)&lt;/code&gt; behaves exactly like &lt;code&gt;String.prototype.replace(searchValue, replacement)&lt;/code&gt;, with the following two exceptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;searchValue&lt;/code&gt; is a string, then &lt;code&gt;String#replace&lt;/code&gt; only replaces the first occurrence of the substring, while &lt;code&gt;String#replaceAll&lt;/code&gt; replaces &lt;em&gt;all&lt;/em&gt; occurrences.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;searchValue&lt;/code&gt; is a non-global RegExp, then &lt;code&gt;String#replace&lt;/code&gt; replaces only a single match, similar to how it behaves for strings. &lt;code&gt;String#replaceAll&lt;/code&gt; on the other hand throws an exception in this case, since this is probably a mistake: if you really want to “replace all” matches, you’d use a global regular expression; if you only want to replace a single match, you can use &lt;code&gt;String#replace&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The important piece of new functionality lies in that first item. &lt;code&gt;String.prototype.replaceAll&lt;/code&gt; enriches JavaScript with first-class support for global substring replacement, without the need for regular expressions or other workarounds.&lt;/p&gt;
&lt;h2 id=&quot;special-patterns&quot;&gt;A note on special replacement patterns &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/string-replaceall#special-patterns&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Worth calling out: both &lt;code&gt;replace&lt;/code&gt; and &lt;code&gt;replaceAll&lt;/code&gt; support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter&quot;&gt;special replacement patterns&lt;/a&gt;. Although these are most useful in combination with regular expressions, some of them (&lt;code&gt;$$&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt;, &lt;code&gt;$` &lt;/code&gt;, and &lt;code&gt;$&#39;&lt;/code&gt;) also take effect when performing simple string replacement, which can be surprising:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$$&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;x$z&#39; (not &#39;x$$z&#39;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In case your replacement string contains one of these patterns, and you want to use them as-is, you can opt-out of the magical substitution behavior by using a replacer function that returns the string instead:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$$&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;x$$z&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;support&quot;&gt;&lt;code&gt;String.prototype.replaceAll&lt;/code&gt; support &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/string-replaceall#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=9801&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;85&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1608168#c8&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;77&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://webkit.org/blog/10247/new-webkit-features-in-safari-13-1/&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;13.1&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Top-level `await`</title><link href="https://v8.js.cn/features/top-level-await"/><updated>2019-10-08T00:00:00Z</updated><id>https://v8.js.cn/features/top-level-await</id><author><name>Myles Borins (@MylesBorins)</name></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-level &lt;code&gt;await&lt;/code&gt;&lt;/a&gt; enables developers to use the &lt;code&gt;await&lt;/code&gt; keyword outside of async functions. It acts like a big async function causing other modules who &lt;code&gt;import&lt;/code&gt; them to wait before they start evaluating their body.&lt;/p&gt;
&lt;h2 id=&quot;old&quot;&gt;The old behavior &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#old&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; was first introduced, attempting to use an &lt;code&gt;await&lt;/code&gt; outside of an &lt;code&gt;async&lt;/code&gt; function resulted in a &lt;code&gt;SyntaxError&lt;/code&gt;. Many developers utilized immediately-invoked async function expressions as a way to get access to the feature.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🎉&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → SyntaxError: await is only valid in async function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🎉&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// → 🎉&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;new&quot;&gt;The new behavior &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#new&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With top-level &lt;code&gt;await&lt;/code&gt;, the above code instead works the way you’d expect within &lt;a href=&quot;https://v8.js.cn/features/modules&quot;&gt;modules&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🎉&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → 🎉&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Top-level &lt;code&gt;await&lt;/code&gt; &lt;em&gt;only&lt;/em&gt; works at the top level of modules. There is no support for classic scripts or non-async functions.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#use-cases&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These use cases are borrowed from the &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await#use-cases&quot;&gt;spec proposal repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;dynamic-dependency-pathing&quot;&gt;Dynamic dependency pathing &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#dynamic-dependency-pathing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; strings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/i18n/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;language&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows for modules to use runtime values in order to determine dependencies. This is useful for things like development/production splits, internationalization, environment splits, etc.&lt;/p&gt;
&lt;h3 id=&quot;resource-initialization&quot;&gt;Resource initialization &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#resource-initialization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dbConnector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows modules to represent resources and also to produce errors in cases where the module cannot be used.&lt;/p&gt;
&lt;h3 id=&quot;dependency-fallbacks&quot;&gt;Dependency fallbacks &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#dependency-fallbacks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following example attempts to load a JavaScript library from CDN A, falling back to CDN B if that fails:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; jQuery&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  jQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://cdn-a.example.com/jQuery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  jQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://cdn-b.example.com/jQuery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;module-execution-order&quot;&gt;Module execution order &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#module-execution-order&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the biggest changes to JavaScript with top-level &lt;code&gt;await&lt;/code&gt; is the order of execution of modules in your graph. The JavaScript engine executes modules in &lt;a href=&quot;https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_1/Fundamentals_of_algorithms/Tree_traversal#Post-order&quot;&gt;post-order traversal&lt;/a&gt;: starting from the left-most subtree of your module graph, modules are evaluated, their bindings are exported, and their siblings are executed, followed by their parents. This algorithm runs recursively until it executes the root of your module graph.&lt;/p&gt;
&lt;p&gt;Prior to top-level &lt;code&gt;await&lt;/code&gt;, this order was always synchronous and deterministic: between multiple runs of your code your graph was guaranteed to execute in the same order. Once top-level &lt;code&gt;await&lt;/code&gt; lands, the same guarantee exists, but only as long as you don’t use top-level &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s what happens when you use top-level &lt;code&gt;await&lt;/code&gt; in a module:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The execution of the current module is deferred until the awaited promise is resolved.&lt;/li&gt;
&lt;li&gt;The execution of the parent module is deferred until the child module that called &lt;code&gt;await&lt;/code&gt;, and all its siblings, export bindings.&lt;/li&gt;
&lt;li&gt;The sibling modules, and siblings of parent modules, are able to continue executing in the same synchronous order — assuming there are no cycles or other &lt;code&gt;await&lt;/code&gt;ed promises in the graph.&lt;/li&gt;
&lt;li&gt;The module that called &lt;code&gt;await&lt;/code&gt; resumes its execution after the &lt;code&gt;await&lt;/code&gt;ed promise resolves.&lt;/li&gt;
&lt;li&gt;The parent module and subsequent trees continue to execute in a synchronous order as long as there are no other &lt;code&gt;await&lt;/code&gt;ed promises.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;doesn%E2%80%99t-this-already-work-in-devtools%3F&quot;&gt;Doesn’t this already work in DevTools? &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#doesn%E2%80%99t-this-already-work-in-devtools%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Indeed it does! The REPL in &lt;a href=&quot;https://developers.google.com/web/updates/2017/08/devtools-release-notes#await&quot;&gt;Chrome DevTools&lt;/a&gt;, &lt;a href=&quot;https://github.com/nodejs/node/issues/13209&quot;&gt;Node.js&lt;/a&gt;, and Safari Web Inspector have supported top-level &lt;code&gt;await&lt;/code&gt; for a while now. However, this functionality was non-standard and limited to the REPL! It’s distinct from the top-level &lt;code&gt;await&lt;/code&gt; proposal, which is part of the language specification and only applies to modules. To test production code relying on top-level &lt;code&gt;await&lt;/code&gt; in a way that fully matches the spec proposal’s semantics, make sure to test in your actual app, and not just in DevTools or the Node.js REPL!&lt;/p&gt;
&lt;h2 id=&quot;isn%E2%80%99t-top-level-await-a-footgun%3F&quot;&gt;Isn’t top-level &lt;code&gt;await&lt;/code&gt; a footgun? &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#isn%E2%80%99t-top-level-await-a-footgun%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Perhaps you have seen &lt;a href=&quot;https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221&quot;&gt;the infamous gist&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Rich_Harris&quot;&gt;Rich Harris&lt;/a&gt; which initially outlined a number of concerns about top-level &lt;code&gt;await&lt;/code&gt; and urged the JavaScript language not to implement the feature. Some specific concerns were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top-level &lt;code&gt;await&lt;/code&gt; could block execution.&lt;/li&gt;
&lt;li&gt;Top-level &lt;code&gt;await&lt;/code&gt; could block fetching resources.&lt;/li&gt;
&lt;li&gt;There would be no clear interop story for CommonJS modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The stage 3 version of the proposal directly addresses these issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As siblings are able to execute, there is no definitive blocking.&lt;/li&gt;
&lt;li&gt;Top-level &lt;code&gt;await&lt;/code&gt; occurs during the execution phase of the module graph. At this point all resources have already been fetched and linked. There is no risk of blocking fetching resources.&lt;/li&gt;
&lt;li&gt;Top-level &lt;code&gt;await&lt;/code&gt; is limited to modules. There is explicitly no support for scripts or for CommonJS modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As with any new language feature, there’s always a risk of unexpected behavior. For example, with top-level &lt;code&gt;await&lt;/code&gt;, circular module dependencies could introduce a deadlock.&lt;/p&gt;
&lt;p&gt;Without top-level &lt;code&gt;await&lt;/code&gt;, JavaScript developers often used async immediately-invoked function expressions just to get access to &lt;code&gt;await&lt;/code&gt;. Unfortunately, this pattern results in less determinism of graph execution and static analyzability of applications. For these reasons, the lack of top-level &lt;code&gt;await&lt;/code&gt; was viewed as a higher risk than the hazards introduced with the feature.&lt;/p&gt;
&lt;h2 id=&quot;support&quot;&gt;Support for top-level &lt;code&gt;await&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/top-level-await#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=9344&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;89&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1519100&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=202484&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;environment no-support has-link&quot;&gt; &lt;a href=&quot;https://github.com/babel/proposals/issues/44&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;不支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry><entry><title>Nullish coalescing</title><link href="https://v8.js.cn/features/nullish-coalescing"/><updated>2019-09-17T00:00:00Z</updated><id>https://v8.js.cn/features/nullish-coalescing</id><author><name>Justin Ridgewell</name></author><content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/tc39/proposal-nullish-coalescing/&quot;&gt;nullish coalescing proposal&lt;/a&gt; (&lt;code&gt;??&lt;/code&gt;) adds a new short-circuiting operator meant to handle default values.&lt;/p&gt;
&lt;p&gt;You might already be familiar with the other short-circuiting operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. Both of these operators handle “truthy” and “falsy” values. Imagine the code sample &lt;code&gt;lhs &amp;amp;&amp;amp; rhs&lt;/code&gt;. If &lt;code&gt;lhs&lt;/code&gt; (read, &lt;em&gt;left-hand side&lt;/em&gt;) is falsy, the expression evaluates to &lt;code&gt;lhs&lt;/code&gt;. Otherwise, it evaluates to &lt;code&gt;rhs&lt;/code&gt; (read, &lt;em&gt;right-hand side&lt;/em&gt;). The opposite is true for the code sample &lt;code&gt;lhs || rhs&lt;/code&gt;. If &lt;code&gt;lhs&lt;/code&gt; is truthy, the expression evaluates to &lt;code&gt;lhs&lt;/code&gt;. Otherwise, it evaluates to &lt;code&gt;rhs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But what exactly does “truthy” and “falsy” mean? In spec terms, it equates to the &lt;a href=&quot;https://tc39.es/ecma262/#sec-toboolean&quot;&gt;&lt;code&gt;ToBoolean&lt;/code&gt;&lt;/a&gt; abstract operation. For us regular JavaScript developers, &lt;strong&gt;everything&lt;/strong&gt; is truthy except the falsy values &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, and the empty string &lt;code&gt;&#39;&#39;&lt;/code&gt;. (Technically, the value associated with &lt;code&gt;document.all&lt;/code&gt; is also falsy, but we’ll get to that later.)&lt;/p&gt;
&lt;p&gt;So, what’s the issue with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;? And why do we need a new nullish coalescing operator? It’s because this definition of truthy and falsy doesn’t fit every scenario and this leads to bugs. Imagine the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enabled &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, let’s treat the &lt;code&gt;enabled&lt;/code&gt; property as an optional boolean property that controls whether some functionality in the component is enabled. Meaning, we can explicitly set &lt;code&gt;enabled&lt;/code&gt; to either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. But, because it is an &lt;em&gt;optional&lt;/em&gt; property, we can implicitly set it to &lt;code&gt;undefined&lt;/code&gt; by not setting it at all. If it’s &lt;code&gt;undefined&lt;/code&gt; we want to treat it as if the component is &lt;code&gt;enabled = true&lt;/code&gt; (its default value).&lt;/p&gt;
&lt;p&gt;By now, you can probably spot the bug with the code example. If we explicitly set &lt;code&gt;enabled = true&lt;/code&gt;, then the &lt;code&gt;enable&lt;/code&gt; variable is &lt;code&gt;true&lt;/code&gt;. If we implicitly set &lt;code&gt;enabled = undefined&lt;/code&gt;, then the &lt;code&gt;enable&lt;/code&gt; variable is &lt;code&gt;true&lt;/code&gt;. And if we explicitly set &lt;code&gt;enabled = false&lt;/code&gt;, then the &lt;code&gt;enable&lt;/code&gt; variable is still &lt;code&gt;true&lt;/code&gt;! Our intention was to &lt;em&gt;default&lt;/em&gt; the value to &lt;code&gt;true&lt;/code&gt;, but we actually forced the value instead. The fix in this case is to be very explicit about the values we expect:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enabled &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see this kind of bug pop up with every falsy value. This could have very easily been an optional string (where the empty string &lt;code&gt;&#39;&#39;&lt;/code&gt; is considered valid input), or an optional number (where &lt;code&gt;0&lt;/code&gt; is considered a valid input). This is such a common problem that we’re now introducing the nullish coalescing operator to handle this sort of default value assignment:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enabled &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;) acts very similar to the &lt;code&gt;||&lt;/code&gt; operator, except that we don’t use “truthy” when evaluating the operator. Instead we use the definition of “nullish”, meaning “is the value strictly equal to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;”. So imagine the expression &lt;code&gt;lhs ?? rhs&lt;/code&gt;: if &lt;code&gt;lhs&lt;/code&gt; is not nullish, it evaluates to &lt;code&gt;lhs&lt;/code&gt;. Otherwise, it evaluates to &lt;code&gt;rhs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Explicitly, that means the values &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, and the empty string &lt;code&gt;&#39;&#39;&lt;/code&gt; are all falsy values that are not nullish. When such falsy-but-not-nullish values are the left-hand side of a &lt;code&gt;lhs ?? rhs&lt;/code&gt;, the expression evaluates to them instead of the right-hand side. Bugs begone!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// =&gt; false&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;// =&gt; 0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; &#39;&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;// =&gt; []&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;destructuring&quot;&gt;What about default assignment while destructuring? &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/nullish-coalescing#destructuring&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might have noticed that the last code example could also be fixed by using default assignment inside an object destructure:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    enabled&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; enable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// …&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s a bit of a mouthful, but still completely valid JavaScript. It uses slightly different semantics, though. Default assignment inside object destructures checks if the property is strictly equal to &lt;code&gt;undefined&lt;/code&gt;, and if so defaults the assignment.&lt;/p&gt;
&lt;p&gt;But these strict equality tests for only &lt;code&gt;undefined&lt;/code&gt; aren’t always desirable, and an object to perform destructing on isn’t always available. For instance, maybe you want to default on a function’s return values (no object to destructure). Or maybe the function returns &lt;code&gt;null&lt;/code&gt; (which is common for DOM APIs). These are the times you want to reach for nullish coalescing:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Concise nullish coalescing&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Default assignment destructure with boilerplate&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  link&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, certain new features like &lt;a href=&quot;https://v8.js.cn/features/optional-chaining&quot;&gt;optional chaining&lt;/a&gt; don’t work perfectly with destructuring. Since destructuring requires an object, you must guard the destructure in case the optional chain returned &lt;code&gt;undefined&lt;/code&gt; instead of an object. With nullish coalescing, we have no such problem:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Optional chaining and nullish coalescing in tandem&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deep&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Default assignment destructure with optional chaining&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deep&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;container &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mixing-and-matching-operators&quot;&gt;Mixing and matching operators &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/nullish-coalescing#mixing-and-matching-operators&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Language design is hard, and we’re not always able to create new operators without a certain amount of ambiguity in the intention of the developer. If you’ve ever mixed the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators together, you’ve probably run into this ambiguity yourself. Imagine the expression &lt;code&gt;lhs &amp;amp;&amp;amp; middle || rhs&lt;/code&gt;. In JavaScript, this is actually parsed the same as the expression &lt;code&gt;(lhs &amp;amp;&amp;amp; middle) || rhs&lt;/code&gt;. Now imagine the expression &lt;code&gt;lhs || middle &amp;amp;&amp;amp; rhs&lt;/code&gt;. This one is actually parsed the same as &lt;code&gt;lhs || (middle &amp;amp;&amp;amp; rhs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can probably see that the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator has a higher precedence for its left- and right-hand side than the &lt;code&gt;||&lt;/code&gt; operator, meaning that the implied parentheses wrap the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; instead of the &lt;code&gt;||&lt;/code&gt;. When designing the &lt;code&gt;??&lt;/code&gt; operator, we had to decide what the precedence would be. It could either have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lower precedence than both &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;lower than &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; but higher than &lt;code&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;higher precedence than both &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each of these precedence definitions, we then had to run it through the four possible test cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;lhs &amp;amp;&amp;amp; middle ?? rhs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lhs ?? middle &amp;amp;&amp;amp; rhs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lhs || middle ?? rhs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lhs ?? middle || rhs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In each test expression, we had to decide where the implicit parenthesis belonged. And if they didn’t wrap the expression exactly the way the developer intended, then we’d have badly-written code. Unfortunately no matter which precedence level we chose, one of the test expressions could violate the developer’s intentions.&lt;/p&gt;
&lt;p&gt;In the end, we decided to require explicit parentheses when mixing the &lt;code&gt;??&lt;/code&gt; and (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;) (notice I was explicit with my parentheses grouping! meta joke!). If you mix, you must wrap one of the operator groups in parentheses, or you get a syntax error.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Explicit parentheses groups are required to mix&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lhs &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; middle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;lhs &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middle &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lhs &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; middle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;lhs &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middle &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lhs &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; middle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;lhs &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middle &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lhs &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; middle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;lhs &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middle &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; rhs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, the language parser always matches what the developer intended. And anyone later reading the code can immediately understand it, too. Nice!&lt;/p&gt;
&lt;h2 id=&quot;document.all&quot;&gt;Tell me about &lt;code&gt;document.all&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/nullish-coalescing#document.all&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/all&quot;&gt;&lt;code&gt;document.all&lt;/code&gt;&lt;/a&gt; is a special value that you should never ever ever use. But if you do use it, it’s best you know how it interacts with “truthy” and “nullish”.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;document.all&lt;/code&gt; is an array-like object, meaning it has indexed properties like an array and a length. Objects are usually truthy — but surprisingly, &lt;code&gt;document.all&lt;/code&gt; pretends to be a falsy value! In fact, it’s loosely equal to both &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; (which normally means that it can’t have properties at all).&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;document.all&lt;/code&gt; with either &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, it pretends to be falsy. But, it’s not strictly equal to &lt;code&gt;null&lt;/code&gt; nor &lt;code&gt;undefined&lt;/code&gt;, so it’s not nullish. So when using &lt;code&gt;document.all&lt;/code&gt; with &lt;code&gt;??&lt;/code&gt;, it behaves like any other object would.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;all &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; true&lt;/span&gt;&lt;br /&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;all &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; HTMLAllCollection[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;support&quot;&gt;Support for nullish coalescing &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.js.cn/features/nullish-coalescing#support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;feature-support&quot;&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=9547&quot;&gt; &lt;span class=&quot;icon chrome&quot;&gt;Chrome:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;80&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1566141&quot;&gt; &lt;span class=&quot;icon firefox&quot;&gt;Firefox:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;72&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://webkit.org/blog/10247/new-webkit-features-in-safari-13-1/&quot;&gt; &lt;span class=&quot;icon safari&quot;&gt;Safari:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;13.1&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e&quot;&gt; &lt;span class=&quot;icon nodejs&quot;&gt;Node.js:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;自 &lt;span class=&quot;version&quot;&gt;14&lt;/span&gt; 版本开始支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;environment has-support has-link&quot;&gt; &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator&quot;&gt; &lt;span class=&quot;icon babel&quot;&gt;Babel:&lt;/span&gt; &lt;span class=&quot;support&quot;&gt;支持&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;div class=&quot;feature-support-info&quot;&gt;&lt;a href=&quot;https://v8.js.cn/features/support&quot;&gt;关于特性支持列表&lt;/a&gt;&lt;/div&gt;
</content></entry></feed>